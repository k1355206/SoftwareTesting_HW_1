package exercise03;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }


    // The following exception was thrown during execution in test generation
    try {
      exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NegativeArraySizeException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.function.Consumer consumer7 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj2 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj7 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer5 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj9 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)10.0d);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)(byte)100);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)(short)0);
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)1L);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.function.Consumer consumer4 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj9 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer9 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    java.util.Spliterator spliterator2 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer3 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator2);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    int i8 = ringBuffer1.size();
    java.util.function.Consumer consumer9 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator2 = ringBuffer1.iterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj3 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator2);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(1);
    boolean b16 = ringBuffer15.isEmpty();
    java.util.Spliterator spliterator17 = ringBuffer15.spliterator();
    java.util.Spliterator spliterator18 = ringBuffer15.spliterator();
    java.util.Iterator iterator19 = ringBuffer15.iterator();
    java.util.Iterator iterator20 = ringBuffer15.iterator();
    boolean b21 = ringBuffer15.isEmpty();
    exercise03.RingBuffer ringBuffer23 = new exercise03.RingBuffer(1);
    boolean b24 = ringBuffer23.isEmpty();
    java.util.Spliterator spliterator25 = ringBuffer23.spliterator();
    java.util.Spliterator spliterator26 = ringBuffer23.spliterator();
    ringBuffer15.enqueue((java.lang.Object)ringBuffer23);
    boolean b28 = ringBuffer15.isEmpty();
    java.util.Spliterator spliterator29 = ringBuffer15.spliterator();
    ringBuffer9.enqueue((java.lang.Object)spliterator29);
    java.util.function.Consumer consumer31 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer9.forEach(consumer31);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator29);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    java.util.Spliterator spliterator2 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer3 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator2);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    java.util.function.Consumer consumer14 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Iterator iterator4 = ringBuffer1.iterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj5 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator4);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)(short)0);
    java.util.function.Consumer consumer5 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    java.util.Iterator iterator14 = ringBuffer1.iterator();
    java.util.function.Consumer consumer15 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Iterator iterator3 = ringBuffer1.iterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj4 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator3);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    java.util.function.Consumer consumer14 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer9.forEach(consumer14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj6 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.function.Consumer consumer7 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(100);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj2 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer11 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj8 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.lang.Object obj4 = ringBuffer1.dequeue();
    ringBuffer1.enqueue((java.lang.Object)(short)1);
    java.util.function.Consumer consumer7 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 'a'+ "'", obj4.equals('a'));

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    java.util.function.Consumer consumer2 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    boolean b5 = ringBuffer1.isEmpty();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.function.Consumer consumer7 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj9 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    java.util.Iterator iterator14 = ringBuffer1.iterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)(byte)100);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator2 = ringBuffer1.iterator();
    java.util.function.Consumer consumer3 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator2);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.lang.Object obj5 = ringBuffer1.dequeue();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj7 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 'a'+ "'", obj5.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.lang.Object obj4 = ringBuffer1.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj5 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 'a'+ "'", obj4.equals('a'));

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    int i7 = ringBuffer1.size();
    boolean b8 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer9 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    boolean b15 = ringBuffer9.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    java.util.function.Consumer consumer17 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer9.forEach(consumer17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj2 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    boolean b16 = ringBuffer11.isEmpty();
    int i17 = ringBuffer11.size();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    ringBuffer3.enqueue((java.lang.Object)spliterator18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer3);
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(10);
    ringBuffer22.enqueue((java.lang.Object)'#');
    int i25 = ringBuffer22.size();
    java.util.Iterator iterator26 = ringBuffer22.iterator();
    java.util.Spliterator spliterator27 = ringBuffer22.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer3.enqueue((java.lang.Object)ringBuffer22);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj7 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj3 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    int i9 = ringBuffer1.size();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj10 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj9 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Iterator iterator4 = ringBuffer1.iterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)spliterator9);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Iterator iterator3 = ringBuffer1.iterator();
    java.util.function.Consumer consumer4 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator3);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    int i10 = ringBuffer1.size();
    java.util.function.Consumer consumer11 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    exercise03.RingBuffer ringBuffer18 = new exercise03.RingBuffer(1);
    boolean b19 = ringBuffer18.isEmpty();
    java.util.Spliterator spliterator20 = ringBuffer18.spliterator();
    java.util.Spliterator spliterator21 = ringBuffer18.spliterator();
    java.util.Iterator iterator22 = ringBuffer18.iterator();
    java.util.Iterator iterator23 = ringBuffer18.iterator();
    java.util.Spliterator spliterator24 = ringBuffer18.spliterator();
    java.util.Iterator iterator25 = ringBuffer18.iterator();
    boolean b26 = ringBuffer18.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer18);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Iterator iterator4 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer6 = new exercise03.RingBuffer(1);
    boolean b7 = ringBuffer6.isEmpty();
    java.util.Spliterator spliterator8 = ringBuffer6.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer6.spliterator();
    java.util.Iterator iterator10 = ringBuffer6.iterator();
    java.util.Iterator iterator11 = ringBuffer6.iterator();
    java.util.Spliterator spliterator12 = ringBuffer6.spliterator();
    int i13 = ringBuffer6.size();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer6);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    exercise03.RingBuffer ringBuffer20 = new exercise03.RingBuffer(1);
    boolean b21 = ringBuffer20.isEmpty();
    java.util.Spliterator spliterator22 = ringBuffer20.spliterator();
    java.util.Spliterator spliterator23 = ringBuffer20.spliterator();
    java.util.Iterator iterator24 = ringBuffer20.iterator();
    boolean b25 = ringBuffer20.isEmpty();
    java.util.Iterator iterator26 = ringBuffer20.iterator();
    exercise03.RingBuffer ringBuffer28 = new exercise03.RingBuffer(1);
    boolean b29 = ringBuffer28.isEmpty();
    java.util.Spliterator spliterator30 = ringBuffer28.spliterator();
    java.util.Spliterator spliterator31 = ringBuffer28.spliterator();
    java.util.Iterator iterator32 = ringBuffer28.iterator();
    java.util.Iterator iterator33 = ringBuffer28.iterator();
    boolean b34 = ringBuffer28.isEmpty();
    ringBuffer20.enqueue((java.lang.Object)ringBuffer28);
    boolean b36 = ringBuffer20.isEmpty();
    ringBuffer10.enqueue((java.lang.Object)ringBuffer20);
    java.util.function.Consumer consumer38 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer20.forEach(consumer38);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer9 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.function.Consumer consumer5 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    exercise03.RingBuffer ringBuffer20 = new exercise03.RingBuffer(1);
    boolean b21 = ringBuffer20.isEmpty();
    java.util.Spliterator spliterator22 = ringBuffer20.spliterator();
    java.util.Spliterator spliterator23 = ringBuffer20.spliterator();
    java.util.Iterator iterator24 = ringBuffer20.iterator();
    boolean b25 = ringBuffer20.isEmpty();
    java.util.Iterator iterator26 = ringBuffer20.iterator();
    exercise03.RingBuffer ringBuffer28 = new exercise03.RingBuffer(1);
    boolean b29 = ringBuffer28.isEmpty();
    java.util.Spliterator spliterator30 = ringBuffer28.spliterator();
    java.util.Spliterator spliterator31 = ringBuffer28.spliterator();
    java.util.Iterator iterator32 = ringBuffer28.iterator();
    java.util.Iterator iterator33 = ringBuffer28.iterator();
    boolean b34 = ringBuffer28.isEmpty();
    ringBuffer20.enqueue((java.lang.Object)ringBuffer28);
    boolean b36 = ringBuffer20.isEmpty();
    ringBuffer10.enqueue((java.lang.Object)ringBuffer20);
    exercise03.RingBuffer ringBuffer39 = new exercise03.RingBuffer(1);
    boolean b40 = ringBuffer39.isEmpty();
    java.util.Spliterator spliterator41 = ringBuffer39.spliterator();
    java.util.Spliterator spliterator42 = ringBuffer39.spliterator();
    java.util.Spliterator spliterator43 = ringBuffer39.spliterator();
    java.util.Iterator iterator44 = ringBuffer39.iterator();
    exercise03.RingBuffer ringBuffer46 = new exercise03.RingBuffer(1);
    ringBuffer46.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator49 = ringBuffer46.spliterator();
    java.lang.Object obj50 = ringBuffer46.dequeue();
    java.util.Spliterator spliterator51 = ringBuffer46.spliterator();
    ringBuffer39.enqueue((java.lang.Object)spliterator51);
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer10.enqueue((java.lang.Object)spliterator51);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj50 + "' != '" + 'a'+ "'", obj50.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator51);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator11 = ringBuffer1.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj12 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    boolean b14 = ringBuffer9.isEmpty();
    int i15 = ringBuffer9.size();
    java.util.Spliterator spliterator16 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator16);
    int i18 = ringBuffer1.size();
    java.util.function.Consumer consumer19 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator2 = ringBuffer1.iterator();
    java.util.Iterator iterator3 = ringBuffer1.iterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj4 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator3);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    int i7 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(10);
    ringBuffer9.enqueue((java.lang.Object)'#');
    java.lang.Object obj12 = ringBuffer9.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue(obj12);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + '#'+ "'", obj12.equals('#'));

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    int i7 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    java.util.Spliterator spliterator15 = ringBuffer9.spliterator();
    int i16 = ringBuffer9.size();
    java.util.Spliterator spliterator17 = ringBuffer9.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer10 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer8 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer3 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    boolean b14 = ringBuffer9.isEmpty();
    int i15 = ringBuffer9.size();
    java.util.Spliterator spliterator16 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator16);
    java.util.function.Consumer consumer18 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer10 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.function.Consumer consumer6 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    boolean b6 = ringBuffer1.isEmpty();
    boolean b7 = ringBuffer1.isEmpty();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    java.util.function.Consumer consumer9 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer7);
    int i11 = ringBuffer7.size();
    java.util.Spliterator spliterator12 = ringBuffer7.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer7);
    int i11 = ringBuffer7.size();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj12 = ringBuffer7.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)(byte)(-1));
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(0);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    ringBuffer3.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    int i7 = ringBuffer3.size();
    boolean b8 = ringBuffer3.isEmpty();
    boolean b9 = ringBuffer3.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)b9);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    java.util.Iterator iterator2 = ringBuffer1.iterator();
    java.util.function.Consumer consumer3 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator2);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj9 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    java.util.function.Consumer consumer10 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer8.forEach(consumer10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    boolean b17 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer18 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer7);
    int i11 = ringBuffer7.size();
    boolean b12 = ringBuffer7.isEmpty();
    int i13 = ringBuffer7.size();
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer17 = new exercise03.RingBuffer(1);
    boolean b18 = ringBuffer17.isEmpty();
    java.util.Spliterator spliterator19 = ringBuffer17.spliterator();
    java.util.Spliterator spliterator20 = ringBuffer17.spliterator();
    java.util.Iterator iterator21 = ringBuffer17.iterator();
    boolean b22 = ringBuffer17.isEmpty();
    java.util.Iterator iterator23 = ringBuffer17.iterator();
    exercise03.RingBuffer ringBuffer25 = new exercise03.RingBuffer(1);
    boolean b26 = ringBuffer25.isEmpty();
    java.util.Spliterator spliterator27 = ringBuffer25.spliterator();
    java.util.Spliterator spliterator28 = ringBuffer25.spliterator();
    java.util.Iterator iterator29 = ringBuffer25.iterator();
    boolean b30 = ringBuffer25.isEmpty();
    int i31 = ringBuffer25.size();
    java.util.Spliterator spliterator32 = ringBuffer25.spliterator();
    ringBuffer17.enqueue((java.lang.Object)spliterator32);
    ringBuffer15.enqueue((java.lang.Object)ringBuffer17);
    int i35 = ringBuffer17.size();
    boolean b36 = ringBuffer17.isEmpty();
    ringBuffer7.enqueue((java.lang.Object)b36);
    java.util.function.Consumer consumer38 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer7.forEach(consumer38);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    int i10 = ringBuffer1.size();
    int i11 = ringBuffer1.size();
    java.util.function.Consumer consumer12 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    java.lang.Object obj17 = ringBuffer1.dequeue();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator23 = ringBuffer19.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator23);
    exercise03.RingBuffer ringBuffer26 = new exercise03.RingBuffer(10);
    ringBuffer26.enqueue((java.lang.Object)'#');
    int i29 = ringBuffer26.size();
    java.util.Iterator iterator30 = ringBuffer26.iterator();
    exercise03.RingBuffer ringBuffer32 = new exercise03.RingBuffer(1);
    boolean b33 = ringBuffer32.isEmpty();
    java.util.Spliterator spliterator34 = ringBuffer32.spliterator();
    ringBuffer26.enqueue((java.lang.Object)ringBuffer32);
    int i36 = ringBuffer32.size();
    boolean b37 = ringBuffer32.isEmpty();
    exercise03.RingBuffer ringBuffer39 = new exercise03.RingBuffer(1);
    ringBuffer39.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator42 = ringBuffer39.spliterator();
    int i43 = ringBuffer39.size();
    java.util.Spliterator spliterator44 = ringBuffer39.spliterator();
    java.util.Iterator iterator45 = ringBuffer39.iterator();
    ringBuffer32.enqueue((java.lang.Object)iterator45);
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer32);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator45);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Iterator iterator10 = ringBuffer1.iterator();
    boolean b11 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer12 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    boolean b16 = ringBuffer11.isEmpty();
    int i17 = ringBuffer11.size();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    ringBuffer3.enqueue((java.lang.Object)spliterator18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer3);
    java.util.function.Consumer consumer21 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer3.forEach(consumer21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Iterator iterator4 = ringBuffer1.iterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj6 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Iterator iterator9 = ringBuffer1.iterator();
    int i10 = ringBuffer1.size();
    java.util.function.Consumer consumer11 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer11.spliterator();
    java.util.Iterator iterator16 = ringBuffer11.iterator();
    ringBuffer8.enqueue((java.lang.Object)ringBuffer11);
    int i18 = ringBuffer8.size();
    java.util.function.Consumer consumer19 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer8.forEach(consumer19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Iterator iterator19 = ringBuffer10.iterator();
    int i20 = ringBuffer10.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    boolean b14 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer15 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.lang.Object obj4 = ringBuffer1.dequeue();
    ringBuffer1.enqueue((java.lang.Object)(short)1);
    java.lang.Object obj7 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue(obj7);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 'a'+ "'", obj4.equals('a'));

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Spliterator spliterator19 = ringBuffer10.spliterator();
    boolean b20 = ringBuffer10.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj21 = ringBuffer10.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    java.lang.Object obj17 = ringBuffer1.dequeue();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator23 = ringBuffer19.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator23);
    java.lang.Object obj25 = ringBuffer1.dequeue();
    java.util.function.Consumer consumer26 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer26);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    boolean b15 = ringBuffer9.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    boolean b17 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(10);
    ringBuffer19.enqueue((java.lang.Object)false);
    ringBuffer19.enqueue((java.lang.Object)(short)0);
    exercise03.RingBuffer ringBuffer25 = new exercise03.RingBuffer(1);
    ringBuffer25.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator28 = ringBuffer25.spliterator();
    int i29 = ringBuffer25.size();
    boolean b30 = ringBuffer25.isEmpty();
    boolean b31 = ringBuffer25.isEmpty();
    java.util.Iterator iterator32 = ringBuffer25.iterator();
    int i33 = ringBuffer25.size();
    ringBuffer19.enqueue((java.lang.Object)ringBuffer25);
    java.lang.Object obj35 = ringBuffer25.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue(obj35);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 'a'+ "'", obj35.equals('a'));

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer8 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.lang.Object obj4 = ringBuffer1.dequeue();
    ringBuffer1.enqueue((java.lang.Object)(short)1);
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.function.Consumer consumer8 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 'a'+ "'", obj4.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj11 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    int i10 = ringBuffer1.size();
    int i11 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer13 = new exercise03.RingBuffer(1);
    boolean b14 = ringBuffer13.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer13.spliterator();
    java.util.Spliterator spliterator16 = ringBuffer13.spliterator();
    java.util.Iterator iterator17 = ringBuffer13.iterator();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    ringBuffer13.enqueue((java.lang.Object)spliterator22);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer13);
    java.util.function.Consumer consumer25 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    boolean b16 = ringBuffer10.isEmpty();
    exercise03.RingBuffer ringBuffer18 = new exercise03.RingBuffer(1);
    boolean b19 = ringBuffer18.isEmpty();
    java.util.Spliterator spliterator20 = ringBuffer18.spliterator();
    java.util.Spliterator spliterator21 = ringBuffer18.spliterator();
    ringBuffer10.enqueue((java.lang.Object)ringBuffer18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer18);
    java.util.function.Consumer consumer24 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer18.forEach(consumer24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Spliterator spliterator19 = ringBuffer10.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj20 = ringBuffer10.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Iterator iterator9 = ringBuffer1.iterator();
    java.util.function.Consumer consumer10 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    boolean b4 = ringBuffer1.isEmpty();
    boolean b5 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer6 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer4 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    int i6 = ringBuffer1.size();
    java.util.function.Consumer consumer7 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator23 = ringBuffer19.spliterator();
    java.util.Iterator iterator24 = ringBuffer19.iterator();
    ringBuffer10.enqueue((java.lang.Object)iterator24);
    java.lang.Object obj26 = ringBuffer10.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue(obj26);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj26);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer7);
    java.util.function.Consumer consumer11 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer7.forEach(consumer11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.lang.Object obj4 = ringBuffer1.dequeue();
    java.util.function.Consumer consumer5 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 'a'+ "'", obj4.equals('a'));

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Spliterator spliterator19 = ringBuffer10.spliterator();
    boolean b20 = ringBuffer10.isEmpty();
    boolean b21 = ringBuffer10.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj22 = ringBuffer10.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator11 = ringBuffer1.spliterator();
    java.util.Iterator iterator12 = ringBuffer1.iterator();
    java.util.Iterator iterator13 = ringBuffer1.iterator();
    java.util.function.Consumer consumer14 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.lang.Object obj9 = ringBuffer1.dequeue();
    java.util.function.Consumer consumer10 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 'a'+ "'", obj9.equals('a'));

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(100);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator9);
    java.util.Spliterator spliterator11 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer12 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    int i7 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    ringBuffer9.enqueue((java.lang.Object)'a');
    java.lang.Object obj12 = ringBuffer9.dequeue();
    java.util.Spliterator spliterator13 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    java.util.function.Consumer consumer15 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer9.forEach(consumer15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 'a'+ "'", obj12.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Iterator iterator3 = ringBuffer1.iterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer5 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    ringBuffer1.enqueue((java.lang.Object)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer11.spliterator();
    java.util.Iterator iterator16 = ringBuffer11.iterator();
    ringBuffer8.enqueue((java.lang.Object)ringBuffer11);
    int i18 = ringBuffer8.size();
    int i19 = ringBuffer8.size();
    java.util.function.Consumer consumer20 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer8.forEach(consumer20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Spliterator spliterator19 = ringBuffer10.spliterator();
    int i20 = ringBuffer10.size();
    boolean b21 = ringBuffer10.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    boolean b11 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    boolean b16 = ringBuffer11.isEmpty();
    int i17 = ringBuffer11.size();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    ringBuffer3.enqueue((java.lang.Object)spliterator18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer3);
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(1);
    boolean b23 = ringBuffer22.isEmpty();
    java.util.Spliterator spliterator24 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator25 = ringBuffer22.spliterator();
    java.util.Iterator iterator26 = ringBuffer22.iterator();
    boolean b27 = ringBuffer22.isEmpty();
    int i28 = ringBuffer22.size();
    java.util.Iterator iterator29 = ringBuffer22.iterator();
    exercise03.RingBuffer ringBuffer31 = new exercise03.RingBuffer(1);
    boolean b32 = ringBuffer31.isEmpty();
    java.util.Spliterator spliterator33 = ringBuffer31.spliterator();
    java.util.Spliterator spliterator34 = ringBuffer31.spliterator();
    java.util.Iterator iterator35 = ringBuffer31.iterator();
    boolean b36 = ringBuffer31.isEmpty();
    int i37 = ringBuffer31.size();
    java.util.Spliterator spliterator38 = ringBuffer31.spliterator();
    ringBuffer22.enqueue((java.lang.Object)ringBuffer31);
    java.util.Spliterator spliterator40 = ringBuffer31.spliterator();
    java.util.Spliterator spliterator41 = ringBuffer31.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer3.enqueue((java.lang.Object)spliterator41);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator41);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    int i7 = ringBuffer1.size();
    int i8 = ringBuffer1.size();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer10 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    int i9 = ringBuffer1.size();
    int i10 = ringBuffer1.size();
    boolean b11 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer12 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Iterator iterator19 = ringBuffer1.iterator();
    java.util.function.Consumer consumer20 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    java.lang.Object obj17 = ringBuffer1.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj18 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(1);
    boolean b16 = ringBuffer15.isEmpty();
    java.util.Spliterator spliterator17 = ringBuffer15.spliterator();
    java.util.Spliterator spliterator18 = ringBuffer15.spliterator();
    java.util.Iterator iterator19 = ringBuffer15.iterator();
    java.util.Iterator iterator20 = ringBuffer15.iterator();
    boolean b21 = ringBuffer15.isEmpty();
    exercise03.RingBuffer ringBuffer23 = new exercise03.RingBuffer(1);
    boolean b24 = ringBuffer23.isEmpty();
    java.util.Spliterator spliterator25 = ringBuffer23.spliterator();
    java.util.Spliterator spliterator26 = ringBuffer23.spliterator();
    ringBuffer15.enqueue((java.lang.Object)ringBuffer23);
    boolean b28 = ringBuffer15.isEmpty();
    java.util.Spliterator spliterator29 = ringBuffer15.spliterator();
    ringBuffer9.enqueue((java.lang.Object)spliterator29);
    exercise03.RingBuffer ringBuffer32 = new exercise03.RingBuffer(1);
    boolean b33 = ringBuffer32.isEmpty();
    java.util.Spliterator spliterator34 = ringBuffer32.spliterator();
    java.util.Spliterator spliterator35 = ringBuffer32.spliterator();
    java.util.Iterator iterator36 = ringBuffer32.iterator();
    boolean b37 = ringBuffer32.isEmpty();
    java.util.Iterator iterator38 = ringBuffer32.iterator();
    exercise03.RingBuffer ringBuffer40 = new exercise03.RingBuffer(1);
    boolean b41 = ringBuffer40.isEmpty();
    java.util.Spliterator spliterator42 = ringBuffer40.spliterator();
    java.util.Spliterator spliterator43 = ringBuffer40.spliterator();
    java.util.Iterator iterator44 = ringBuffer40.iterator();
    java.util.Iterator iterator45 = ringBuffer40.iterator();
    boolean b46 = ringBuffer40.isEmpty();
    ringBuffer32.enqueue((java.lang.Object)ringBuffer40);
    boolean b48 = ringBuffer40.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer9.enqueue((java.lang.Object)b48);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(0);
    java.util.Spliterator spliterator2 = ringBuffer1.spliterator();
    java.util.Iterator iterator3 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer5 = new exercise03.RingBuffer(1);
    boolean b6 = ringBuffer5.isEmpty();
    java.util.Spliterator spliterator7 = ringBuffer5.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer5.spliterator();
    java.util.Iterator iterator9 = ringBuffer5.iterator();
    boolean b10 = ringBuffer5.isEmpty();
    int i11 = ringBuffer5.size();
    java.util.Iterator iterator12 = ringBuffer5.iterator();
    exercise03.RingBuffer ringBuffer14 = new exercise03.RingBuffer(1);
    boolean b15 = ringBuffer14.isEmpty();
    java.util.Spliterator spliterator16 = ringBuffer14.spliterator();
    java.util.Spliterator spliterator17 = ringBuffer14.spliterator();
    java.util.Iterator iterator18 = ringBuffer14.iterator();
    boolean b19 = ringBuffer14.isEmpty();
    int i20 = ringBuffer14.size();
    java.util.Spliterator spliterator21 = ringBuffer14.spliterator();
    ringBuffer5.enqueue((java.lang.Object)ringBuffer14);
    java.util.Iterator iterator23 = ringBuffer14.iterator();
    boolean b24 = ringBuffer14.isEmpty();
    boolean b25 = ringBuffer14.isEmpty();
    exercise03.RingBuffer ringBuffer27 = new exercise03.RingBuffer(1);
    boolean b28 = ringBuffer27.isEmpty();
    java.util.Spliterator spliterator29 = ringBuffer27.spliterator();
    java.util.Spliterator spliterator30 = ringBuffer27.spliterator();
    java.util.Iterator iterator31 = ringBuffer27.iterator();
    boolean b32 = ringBuffer27.isEmpty();
    exercise03.RingBuffer ringBuffer34 = new exercise03.RingBuffer(1);
    ringBuffer27.enqueue((java.lang.Object)ringBuffer34);
    exercise03.RingBuffer ringBuffer37 = new exercise03.RingBuffer(1);
    boolean b38 = ringBuffer37.isEmpty();
    java.util.Spliterator spliterator39 = ringBuffer37.spliterator();
    java.util.Spliterator spliterator40 = ringBuffer37.spliterator();
    java.util.Spliterator spliterator41 = ringBuffer37.spliterator();
    java.util.Iterator iterator42 = ringBuffer37.iterator();
    ringBuffer34.enqueue((java.lang.Object)ringBuffer37);
    ringBuffer14.enqueue((java.lang.Object)ringBuffer34);
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer34);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator42);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    int i9 = ringBuffer1.size();
    java.util.function.Consumer consumer10 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    int i7 = ringBuffer1.size();
    boolean b8 = ringBuffer1.isEmpty();
    boolean b9 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator11 = ringBuffer1.spliterator();
    java.util.Iterator iterator12 = ringBuffer1.iterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj13 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    java.util.Iterator iterator10 = ringBuffer1.iterator();
    boolean b11 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer12 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    int i7 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    ringBuffer9.enqueue((java.lang.Object)'a');
    java.lang.Object obj12 = ringBuffer9.dequeue();
    java.util.Spliterator spliterator13 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    java.util.function.Consumer consumer15 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 'a'+ "'", obj12.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    int i7 = ringBuffer1.size();
    boolean b8 = ringBuffer1.isEmpty();
    boolean b9 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator11 = ringBuffer1.spliterator();
    java.util.Iterator iterator12 = ringBuffer1.iterator();
    boolean b13 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator14 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    int i9 = ringBuffer1.size();
    java.util.function.Consumer consumer10 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    int i3 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer5 = new exercise03.RingBuffer(1);
    boolean b6 = ringBuffer5.isEmpty();
    java.util.Spliterator spliterator7 = ringBuffer5.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer5.spliterator();
    java.util.Iterator iterator9 = ringBuffer5.iterator();
    java.util.Iterator iterator10 = ringBuffer5.iterator();
    java.util.Spliterator spliterator11 = ringBuffer5.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.lang.Object obj5 = ringBuffer1.dequeue();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer7.spliterator();
    java.util.Iterator iterator11 = ringBuffer7.iterator();
    java.util.Iterator iterator12 = ringBuffer7.iterator();
    boolean b13 = ringBuffer7.isEmpty();
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(1);
    boolean b16 = ringBuffer15.isEmpty();
    java.util.Spliterator spliterator17 = ringBuffer15.spliterator();
    java.util.Spliterator spliterator18 = ringBuffer15.spliterator();
    ringBuffer7.enqueue((java.lang.Object)ringBuffer15);
    exercise03.RingBuffer ringBuffer21 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator22 = ringBuffer21.iterator();
    ringBuffer15.enqueue((java.lang.Object)ringBuffer21);
    java.util.Iterator iterator24 = ringBuffer21.iterator();
    boolean b25 = ringBuffer21.isEmpty();
    java.util.Spliterator spliterator26 = ringBuffer21.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer21);
    int i28 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 'a'+ "'", obj5.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Iterator iterator9 = ringBuffer1.iterator();
    int i10 = ringBuffer1.size();
    java.util.Iterator iterator11 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer13 = new exercise03.RingBuffer(1);
    boolean b14 = ringBuffer13.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer13.spliterator();
    java.util.Spliterator spliterator16 = ringBuffer13.spliterator();
    java.util.Iterator iterator17 = ringBuffer13.iterator();
    java.util.Iterator iterator18 = ringBuffer13.iterator();
    java.util.Spliterator spliterator19 = ringBuffer13.spliterator();
    java.util.Spliterator spliterator20 = ringBuffer13.spliterator();
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(1);
    boolean b23 = ringBuffer22.isEmpty();
    java.util.Spliterator spliterator24 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator25 = ringBuffer22.spliterator();
    java.util.Iterator iterator26 = ringBuffer22.iterator();
    java.util.Iterator iterator27 = ringBuffer22.iterator();
    boolean b28 = ringBuffer22.isEmpty();
    exercise03.RingBuffer ringBuffer30 = new exercise03.RingBuffer(1);
    boolean b31 = ringBuffer30.isEmpty();
    java.util.Spliterator spliterator32 = ringBuffer30.spliterator();
    java.util.Spliterator spliterator33 = ringBuffer30.spliterator();
    ringBuffer22.enqueue((java.lang.Object)ringBuffer30);
    java.util.Iterator iterator35 = ringBuffer22.iterator();
    ringBuffer13.enqueue((java.lang.Object)ringBuffer22);
    java.lang.Object obj37 = ringBuffer13.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue(obj37);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj37);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer9.spliterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    int i15 = ringBuffer9.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    java.util.Iterator iterator17 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    java.util.Iterator iterator23 = ringBuffer19.iterator();
    java.util.Iterator iterator24 = ringBuffer19.iterator();
    java.util.Spliterator spliterator25 = ringBuffer19.spliterator();
    int i26 = ringBuffer19.size();
    java.util.Spliterator spliterator27 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator28 = ringBuffer19.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)spliterator28);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    java.util.Spliterator spliterator2 = ringBuffer1.spliterator();
    java.util.Iterator iterator3 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator3);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    boolean b15 = ringBuffer9.isEmpty();
    int i16 = ringBuffer9.size();
    boolean b17 = ringBuffer9.isEmpty();
    java.util.Iterator iterator18 = ringBuffer9.iterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)iterator18);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator11 = ringBuffer1.spliterator();
    java.util.Iterator iterator12 = ringBuffer1.iterator();
    java.util.Iterator iterator13 = ringBuffer1.iterator();
    java.util.Spliterator spliterator14 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer15 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    int i10 = ringBuffer1.size();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj11 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    java.lang.Object obj17 = ringBuffer1.dequeue();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator23 = ringBuffer19.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator23);
    exercise03.RingBuffer ringBuffer26 = new exercise03.RingBuffer(1);
    boolean b27 = ringBuffer26.isEmpty();
    java.util.Spliterator spliterator28 = ringBuffer26.spliterator();
    java.util.Spliterator spliterator29 = ringBuffer26.spliterator();
    java.util.Iterator iterator30 = ringBuffer26.iterator();
    boolean b31 = ringBuffer26.isEmpty();
    int i32 = ringBuffer26.size();
    java.util.Spliterator spliterator33 = ringBuffer26.spliterator();
    exercise03.RingBuffer ringBuffer35 = new exercise03.RingBuffer(1);
    boolean b36 = ringBuffer35.isEmpty();
    java.util.Spliterator spliterator37 = ringBuffer35.spliterator();
    java.util.Spliterator spliterator38 = ringBuffer35.spliterator();
    java.util.Spliterator spliterator39 = ringBuffer35.spliterator();
    java.util.Iterator iterator40 = ringBuffer35.iterator();
    ringBuffer26.enqueue((java.lang.Object)iterator40);
    java.lang.Object obj42 = ringBuffer26.dequeue();
    exercise03.RingBuffer ringBuffer44 = new exercise03.RingBuffer(1);
    boolean b45 = ringBuffer44.isEmpty();
    java.util.Spliterator spliterator46 = ringBuffer44.spliterator();
    java.util.Spliterator spliterator47 = ringBuffer44.spliterator();
    java.util.Spliterator spliterator48 = ringBuffer44.spliterator();
    ringBuffer26.enqueue((java.lang.Object)spliterator48);
    java.lang.Object obj50 = ringBuffer26.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue(obj50);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj50);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    boolean b16 = ringBuffer11.isEmpty();
    int i17 = ringBuffer11.size();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    ringBuffer3.enqueue((java.lang.Object)spliterator18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer3);
    int i21 = ringBuffer3.size();
    boolean b22 = ringBuffer3.isEmpty();
    java.util.function.Consumer consumer23 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer3.forEach(consumer23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    java.util.function.Consumer consumer10 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator16 = ringBuffer15.iterator();
    ringBuffer9.enqueue((java.lang.Object)ringBuffer15);
    java.util.Spliterator spliterator18 = ringBuffer9.spliterator();
    java.util.function.Consumer consumer19 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer9.forEach(consumer19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Iterator iterator19 = ringBuffer10.iterator();
    boolean b20 = ringBuffer10.isEmpty();
    boolean b21 = ringBuffer10.isEmpty();
    exercise03.RingBuffer ringBuffer23 = new exercise03.RingBuffer(1);
    boolean b24 = ringBuffer23.isEmpty();
    java.util.Spliterator spliterator25 = ringBuffer23.spliterator();
    java.util.Spliterator spliterator26 = ringBuffer23.spliterator();
    java.util.Iterator iterator27 = ringBuffer23.iterator();
    boolean b28 = ringBuffer23.isEmpty();
    exercise03.RingBuffer ringBuffer30 = new exercise03.RingBuffer(1);
    ringBuffer23.enqueue((java.lang.Object)ringBuffer30);
    exercise03.RingBuffer ringBuffer33 = new exercise03.RingBuffer(1);
    boolean b34 = ringBuffer33.isEmpty();
    java.util.Spliterator spliterator35 = ringBuffer33.spliterator();
    java.util.Spliterator spliterator36 = ringBuffer33.spliterator();
    java.util.Spliterator spliterator37 = ringBuffer33.spliterator();
    java.util.Iterator iterator38 = ringBuffer33.iterator();
    ringBuffer30.enqueue((java.lang.Object)ringBuffer33);
    ringBuffer10.enqueue((java.lang.Object)ringBuffer30);
    java.util.function.Consumer consumer41 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer30.forEach(consumer41);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator38);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    int i7 = ringBuffer1.size();
    java.lang.Object obj8 = ringBuffer1.dequeue();
    int i9 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer11.spliterator();
    java.util.Iterator iterator16 = ringBuffer11.iterator();
    int i17 = ringBuffer11.size();
    boolean b18 = ringBuffer11.isEmpty();
    boolean b19 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator20 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator21 = ringBuffer11.spliterator();
    java.util.Iterator iterator22 = ringBuffer11.iterator();
    exercise03.RingBuffer ringBuffer24 = new exercise03.RingBuffer(0);
    java.util.Spliterator spliterator25 = ringBuffer24.spliterator();
    ringBuffer11.enqueue((java.lang.Object)ringBuffer24);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer11);
    java.util.function.Consumer consumer28 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer11.forEach(consumer28);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + '#'+ "'", obj8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    int i9 = ringBuffer1.size();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer12 = new exercise03.RingBuffer(10);
    ringBuffer12.enqueue((java.lang.Object)false);
    ringBuffer12.enqueue((java.lang.Object)(short)0);
    java.util.Spliterator spliterator17 = ringBuffer12.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer12);
    java.util.Iterator iterator19 = ringBuffer12.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer7 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    int i10 = ringBuffer1.size();
    int i11 = ringBuffer1.size();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj12 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    boolean b16 = ringBuffer11.isEmpty();
    int i17 = ringBuffer11.size();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    ringBuffer3.enqueue((java.lang.Object)spliterator18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer3);
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(1);
    boolean b23 = ringBuffer22.isEmpty();
    java.util.Spliterator spliterator24 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator25 = ringBuffer22.spliterator();
    java.util.Iterator iterator26 = ringBuffer22.iterator();
    java.util.Iterator iterator27 = ringBuffer22.iterator();
    java.util.Spliterator spliterator28 = ringBuffer22.spliterator();
    java.util.Iterator iterator29 = ringBuffer22.iterator();
    boolean b30 = ringBuffer22.isEmpty();
    exercise03.RingBuffer ringBuffer32 = new exercise03.RingBuffer(1);
    ringBuffer32.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator35 = ringBuffer32.spliterator();
    int i36 = ringBuffer32.size();
    java.util.Spliterator spliterator37 = ringBuffer32.spliterator();
    java.util.Iterator iterator38 = ringBuffer32.iterator();
    java.util.Spliterator spliterator39 = ringBuffer32.spliterator();
    java.util.Iterator iterator40 = ringBuffer32.iterator();
    int i41 = ringBuffer32.size();
    ringBuffer22.enqueue((java.lang.Object)ringBuffer32);
    java.lang.Object obj43 = ringBuffer22.dequeue();
    java.util.Iterator iterator44 = ringBuffer22.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator44);
    java.util.function.Consumer consumer46 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer46);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator44);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer7);
    int i11 = ringBuffer7.size();
    boolean b12 = ringBuffer7.isEmpty();
    exercise03.RingBuffer ringBuffer14 = new exercise03.RingBuffer(0);
    java.util.Spliterator spliterator15 = ringBuffer14.spliterator();
    ringBuffer7.enqueue((java.lang.Object)spliterator15);
    exercise03.RingBuffer ringBuffer18 = new exercise03.RingBuffer(1);
    boolean b19 = ringBuffer18.isEmpty();
    java.util.Spliterator spliterator20 = ringBuffer18.spliterator();
    java.util.Spliterator spliterator21 = ringBuffer18.spliterator();
    java.util.Iterator iterator22 = ringBuffer18.iterator();
    boolean b23 = ringBuffer18.isEmpty();
    exercise03.RingBuffer ringBuffer25 = new exercise03.RingBuffer(1);
    ringBuffer18.enqueue((java.lang.Object)ringBuffer25);
    boolean b27 = ringBuffer18.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer7.enqueue((java.lang.Object)ringBuffer18);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    boolean b15 = ringBuffer9.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    boolean b17 = ringBuffer9.isEmpty();
    boolean b18 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator19 = ringBuffer9.spliterator();
    java.util.function.Consumer consumer20 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer9.forEach(consumer20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(100);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator9);
    int i11 = ringBuffer1.size();
    boolean b12 = ringBuffer1.isEmpty();
    boolean b13 = ringBuffer1.isEmpty();
    int i14 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer7);
    int i11 = ringBuffer7.size();
    boolean b12 = ringBuffer7.isEmpty();
    int i13 = ringBuffer7.size();
    java.util.Iterator iterator14 = ringBuffer7.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer11.spliterator();
    java.util.Iterator iterator16 = ringBuffer11.iterator();
    ringBuffer8.enqueue((java.lang.Object)ringBuffer11);
    java.util.Spliterator spliterator18 = ringBuffer8.spliterator();
    java.util.Spliterator spliterator19 = ringBuffer8.spliterator();
    exercise03.RingBuffer ringBuffer21 = new exercise03.RingBuffer(1);
    boolean b22 = ringBuffer21.isEmpty();
    java.util.Spliterator spliterator23 = ringBuffer21.spliterator();
    java.util.Spliterator spliterator24 = ringBuffer21.spliterator();
    java.util.Iterator iterator25 = ringBuffer21.iterator();
    java.util.Iterator iterator26 = ringBuffer21.iterator();
    java.util.Spliterator spliterator27 = ringBuffer21.spliterator();
    java.util.Iterator iterator28 = ringBuffer21.iterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer8.enqueue((java.lang.Object)iterator28);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator28);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(1);
    boolean b16 = ringBuffer15.isEmpty();
    java.util.Spliterator spliterator17 = ringBuffer15.spliterator();
    java.util.Spliterator spliterator18 = ringBuffer15.spliterator();
    java.util.Iterator iterator19 = ringBuffer15.iterator();
    java.util.Iterator iterator20 = ringBuffer15.iterator();
    boolean b21 = ringBuffer15.isEmpty();
    exercise03.RingBuffer ringBuffer23 = new exercise03.RingBuffer(1);
    boolean b24 = ringBuffer23.isEmpty();
    java.util.Spliterator spliterator25 = ringBuffer23.spliterator();
    java.util.Spliterator spliterator26 = ringBuffer23.spliterator();
    ringBuffer15.enqueue((java.lang.Object)ringBuffer23);
    boolean b28 = ringBuffer15.isEmpty();
    java.util.Spliterator spliterator29 = ringBuffer15.spliterator();
    ringBuffer9.enqueue((java.lang.Object)spliterator29);
    boolean b31 = ringBuffer9.isEmpty();
    java.util.function.Consumer consumer32 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer9.forEach(consumer32);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    int i6 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj19 = ringBuffer10.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Iterator iterator19 = ringBuffer10.iterator();
    boolean b20 = ringBuffer10.isEmpty();
    java.util.function.Consumer consumer21 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer10.forEach(consumer21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.lang.Object obj8 = null;
    ringBuffer1.enqueue(obj8);
    java.util.function.Consumer consumer10 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    int i9 = ringBuffer1.size();
    java.util.function.Consumer consumer10 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Iterator iterator19 = ringBuffer10.iterator();
    boolean b20 = ringBuffer10.isEmpty();
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(1);
    boolean b23 = ringBuffer22.isEmpty();
    java.util.Spliterator spliterator24 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator25 = ringBuffer22.spliterator();
    java.util.Iterator iterator26 = ringBuffer22.iterator();
    java.util.Iterator iterator27 = ringBuffer22.iterator();
    boolean b28 = ringBuffer22.isEmpty();
    int i29 = ringBuffer22.size();
    boolean b30 = ringBuffer22.isEmpty();
    ringBuffer22.enqueue((java.lang.Object)'#');
    ringBuffer10.enqueue((java.lang.Object)'#');
    boolean b34 = ringBuffer10.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer11.spliterator();
    java.util.Iterator iterator16 = ringBuffer11.iterator();
    ringBuffer8.enqueue((java.lang.Object)ringBuffer11);
    java.util.Spliterator spliterator18 = ringBuffer8.spliterator();
    java.util.Spliterator spliterator19 = ringBuffer8.spliterator();
    java.lang.Object obj20 = ringBuffer8.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj20);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer11.spliterator();
    java.util.Iterator iterator16 = ringBuffer11.iterator();
    ringBuffer8.enqueue((java.lang.Object)ringBuffer11);
    int i18 = ringBuffer8.size();
    boolean b19 = ringBuffer8.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator11 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer13 = new exercise03.RingBuffer(1);
    boolean b14 = ringBuffer13.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer13.spliterator();
    java.util.Spliterator spliterator16 = ringBuffer13.spliterator();
    java.util.Iterator iterator17 = ringBuffer13.iterator();
    boolean b18 = ringBuffer13.isEmpty();
    int i19 = ringBuffer13.size();
    java.util.Spliterator spliterator20 = ringBuffer13.spliterator();
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(1);
    boolean b23 = ringBuffer22.isEmpty();
    java.util.Spliterator spliterator24 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator25 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator26 = ringBuffer22.spliterator();
    java.util.Iterator iterator27 = ringBuffer22.iterator();
    ringBuffer13.enqueue((java.lang.Object)iterator27);
    ringBuffer1.enqueue((java.lang.Object)iterator27);
    boolean b30 = ringBuffer1.isEmpty();
    int i31 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer33 = new exercise03.RingBuffer(1);
    ringBuffer33.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator36 = ringBuffer33.spliterator();
    int i37 = ringBuffer33.size();
    boolean b38 = ringBuffer33.isEmpty();
    boolean b39 = ringBuffer33.isEmpty();
    boolean b40 = ringBuffer33.isEmpty();
    boolean b41 = ringBuffer33.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer33);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Iterator iterator11 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.lang.Object obj6 = ringBuffer1.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj7 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 'a'+ "'", obj6.equals('a'));

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer9 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer11.spliterator();
    java.util.Iterator iterator16 = ringBuffer11.iterator();
    ringBuffer8.enqueue((java.lang.Object)ringBuffer11);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj18 = ringBuffer11.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    boolean b9 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    ringBuffer11.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    int i15 = ringBuffer11.size();
    java.util.Spliterator spliterator16 = ringBuffer11.spliterator();
    java.util.Iterator iterator17 = ringBuffer11.iterator();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    java.util.Iterator iterator19 = ringBuffer11.iterator();
    int i20 = ringBuffer11.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer11);
    java.lang.Object obj22 = ringBuffer1.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj23 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj22);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    boolean b17 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    java.util.Iterator iterator23 = ringBuffer19.iterator();
    java.util.Iterator iterator24 = ringBuffer19.iterator();
    boolean b25 = ringBuffer19.isEmpty();
    int i26 = ringBuffer19.size();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)i26);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer9.spliterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    int i15 = ringBuffer9.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj17 = ringBuffer9.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj10 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer9.spliterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    int i15 = ringBuffer9.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    java.util.Iterator iterator17 = ringBuffer1.iterator();
    boolean b18 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    int i10 = ringBuffer1.size();
    int i11 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer13 = new exercise03.RingBuffer(1);
    boolean b14 = ringBuffer13.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer13.spliterator();
    java.util.Spliterator spliterator16 = ringBuffer13.spliterator();
    java.util.Iterator iterator17 = ringBuffer13.iterator();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    ringBuffer13.enqueue((java.lang.Object)spliterator22);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer13);
    int i25 = ringBuffer13.size();
    exercise03.RingBuffer ringBuffer27 = new exercise03.RingBuffer(1);
    boolean b28 = ringBuffer27.isEmpty();
    java.util.Spliterator spliterator29 = ringBuffer27.spliterator();
    java.util.Spliterator spliterator30 = ringBuffer27.spliterator();
    java.util.Iterator iterator31 = ringBuffer27.iterator();
    boolean b32 = ringBuffer27.isEmpty();
    int i33 = ringBuffer27.size();
    java.util.Iterator iterator34 = ringBuffer27.iterator();
    exercise03.RingBuffer ringBuffer36 = new exercise03.RingBuffer(1);
    boolean b37 = ringBuffer36.isEmpty();
    java.util.Spliterator spliterator38 = ringBuffer36.spliterator();
    java.util.Spliterator spliterator39 = ringBuffer36.spliterator();
    java.util.Iterator iterator40 = ringBuffer36.iterator();
    boolean b41 = ringBuffer36.isEmpty();
    int i42 = ringBuffer36.size();
    java.util.Spliterator spliterator43 = ringBuffer36.spliterator();
    ringBuffer27.enqueue((java.lang.Object)ringBuffer36);
    exercise03.RingBuffer ringBuffer46 = new exercise03.RingBuffer(1);
    boolean b47 = ringBuffer46.isEmpty();
    java.util.Spliterator spliterator48 = ringBuffer46.spliterator();
    java.util.Spliterator spliterator49 = ringBuffer46.spliterator();
    java.util.Iterator iterator50 = ringBuffer46.iterator();
    boolean b51 = ringBuffer46.isEmpty();
    java.util.Iterator iterator52 = ringBuffer46.iterator();
    exercise03.RingBuffer ringBuffer54 = new exercise03.RingBuffer(1);
    boolean b55 = ringBuffer54.isEmpty();
    java.util.Spliterator spliterator56 = ringBuffer54.spliterator();
    java.util.Spliterator spliterator57 = ringBuffer54.spliterator();
    java.util.Iterator iterator58 = ringBuffer54.iterator();
    java.util.Iterator iterator59 = ringBuffer54.iterator();
    boolean b60 = ringBuffer54.isEmpty();
    ringBuffer46.enqueue((java.lang.Object)ringBuffer54);
    boolean b62 = ringBuffer46.isEmpty();
    ringBuffer36.enqueue((java.lang.Object)ringBuffer46);
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer13.enqueue((java.lang.Object)ringBuffer36);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Iterator iterator19 = ringBuffer10.iterator();
    boolean b20 = ringBuffer10.isEmpty();
    boolean b21 = ringBuffer10.isEmpty();
    exercise03.RingBuffer ringBuffer23 = new exercise03.RingBuffer(1);
    boolean b24 = ringBuffer23.isEmpty();
    java.util.Spliterator spliterator25 = ringBuffer23.spliterator();
    java.util.Spliterator spliterator26 = ringBuffer23.spliterator();
    java.util.Iterator iterator27 = ringBuffer23.iterator();
    boolean b28 = ringBuffer23.isEmpty();
    exercise03.RingBuffer ringBuffer30 = new exercise03.RingBuffer(1);
    ringBuffer23.enqueue((java.lang.Object)ringBuffer30);
    exercise03.RingBuffer ringBuffer33 = new exercise03.RingBuffer(1);
    boolean b34 = ringBuffer33.isEmpty();
    java.util.Spliterator spliterator35 = ringBuffer33.spliterator();
    java.util.Spliterator spliterator36 = ringBuffer33.spliterator();
    java.util.Spliterator spliterator37 = ringBuffer33.spliterator();
    java.util.Iterator iterator38 = ringBuffer33.iterator();
    ringBuffer30.enqueue((java.lang.Object)ringBuffer33);
    ringBuffer10.enqueue((java.lang.Object)ringBuffer30);
    exercise03.RingBuffer ringBuffer42 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer44 = new exercise03.RingBuffer(1);
    boolean b45 = ringBuffer44.isEmpty();
    java.util.Spliterator spliterator46 = ringBuffer44.spliterator();
    java.util.Spliterator spliterator47 = ringBuffer44.spliterator();
    java.util.Iterator iterator48 = ringBuffer44.iterator();
    boolean b49 = ringBuffer44.isEmpty();
    java.util.Iterator iterator50 = ringBuffer44.iterator();
    exercise03.RingBuffer ringBuffer52 = new exercise03.RingBuffer(1);
    boolean b53 = ringBuffer52.isEmpty();
    java.util.Spliterator spliterator54 = ringBuffer52.spliterator();
    java.util.Spliterator spliterator55 = ringBuffer52.spliterator();
    java.util.Iterator iterator56 = ringBuffer52.iterator();
    boolean b57 = ringBuffer52.isEmpty();
    int i58 = ringBuffer52.size();
    java.util.Spliterator spliterator59 = ringBuffer52.spliterator();
    ringBuffer44.enqueue((java.lang.Object)spliterator59);
    ringBuffer42.enqueue((java.lang.Object)ringBuffer44);
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer10.enqueue((java.lang.Object)ringBuffer42);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator59);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    boolean b16 = ringBuffer11.isEmpty();
    int i17 = ringBuffer11.size();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    ringBuffer3.enqueue((java.lang.Object)spliterator18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer3);
    int i21 = ringBuffer1.size();
    java.util.function.Consumer consumer22 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    java.util.Iterator iterator10 = ringBuffer1.iterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj11 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    int i9 = ringBuffer1.size();
    boolean b10 = ringBuffer1.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj11 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer7);
    int i11 = ringBuffer7.size();
    boolean b12 = ringBuffer7.isEmpty();
    exercise03.RingBuffer ringBuffer14 = new exercise03.RingBuffer(1);
    ringBuffer14.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator17 = ringBuffer14.spliterator();
    int i18 = ringBuffer14.size();
    java.util.Spliterator spliterator19 = ringBuffer14.spliterator();
    java.util.Iterator iterator20 = ringBuffer14.iterator();
    ringBuffer7.enqueue((java.lang.Object)iterator20);
    int i22 = ringBuffer7.size();
    exercise03.RingBuffer ringBuffer24 = new exercise03.RingBuffer(1);
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer7.enqueue((java.lang.Object)1);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    int i7 = ringBuffer1.size();
    int i8 = ringBuffer1.size();
    int i9 = ringBuffer1.size();
    int i10 = ringBuffer1.size();
    java.util.Iterator iterator11 = ringBuffer1.iterator();
    java.util.function.Consumer consumer12 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Spliterator spliterator19 = ringBuffer10.spliterator();
    java.util.Iterator iterator20 = ringBuffer10.iterator();
    java.util.Spliterator spliterator21 = ringBuffer10.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    boolean b15 = ringBuffer9.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    int i17 = ringBuffer9.size();
    java.util.Spliterator spliterator18 = ringBuffer9.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj19 = ringBuffer9.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    boolean b15 = ringBuffer9.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    java.util.Spliterator spliterator17 = ringBuffer9.spliterator();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(10);
    ringBuffer19.enqueue((java.lang.Object)'#');
    int i22 = ringBuffer19.size();
    java.util.Iterator iterator23 = ringBuffer19.iterator();
    int i24 = ringBuffer19.size();
    java.lang.Object obj25 = ringBuffer19.dequeue();
    exercise03.RingBuffer ringBuffer27 = new exercise03.RingBuffer(1);
    ringBuffer27.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator30 = ringBuffer27.spliterator();
    int i31 = ringBuffer27.size();
    boolean b32 = ringBuffer27.isEmpty();
    boolean b33 = ringBuffer27.isEmpty();
    boolean b34 = ringBuffer27.isEmpty();
    boolean b35 = ringBuffer27.isEmpty();
    int i36 = ringBuffer27.size();
    ringBuffer19.enqueue((java.lang.Object)i36);
    java.util.Iterator iterator38 = ringBuffer19.iterator();
    ringBuffer9.enqueue((java.lang.Object)ringBuffer19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + '#'+ "'", obj25.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator38);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    java.lang.Object obj17 = ringBuffer1.dequeue();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator23 = ringBuffer19.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator23);
    java.lang.Object obj25 = ringBuffer1.dequeue();
    boolean b26 = ringBuffer1.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj27 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator11 = ringBuffer1.spliterator();
    java.util.Iterator iterator12 = ringBuffer1.iterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj13 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator16 = ringBuffer15.iterator();
    ringBuffer9.enqueue((java.lang.Object)ringBuffer15);
    java.util.Iterator iterator18 = ringBuffer15.iterator();
    boolean b19 = ringBuffer15.isEmpty();
    java.util.Spliterator spliterator20 = ringBuffer15.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj21 = ringBuffer15.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator16 = ringBuffer15.iterator();
    ringBuffer9.enqueue((java.lang.Object)ringBuffer15);
    java.util.Spliterator spliterator18 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator19 = ringBuffer9.spliterator();
    java.util.function.Consumer consumer20 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer9.forEach(consumer20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    boolean b14 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer1.spliterator();
    boolean b16 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator17 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer18 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    boolean b17 = ringBuffer1.isEmpty();
    boolean b18 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer20 = new exercise03.RingBuffer(1);
    boolean b21 = ringBuffer20.isEmpty();
    java.util.Iterator iterator22 = ringBuffer20.iterator();
    java.util.Spliterator spliterator23 = ringBuffer20.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)spliterator23);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer11.spliterator();
    java.util.Iterator iterator16 = ringBuffer11.iterator();
    ringBuffer8.enqueue((java.lang.Object)ringBuffer11);
    java.util.Spliterator spliterator18 = ringBuffer8.spliterator();
    java.util.Spliterator spliterator19 = ringBuffer8.spliterator();
    int i20 = ringBuffer8.size();
    java.util.function.Consumer consumer21 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer8.forEach(consumer21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    boolean b14 = ringBuffer9.isEmpty();
    int i15 = ringBuffer9.size();
    java.util.Spliterator spliterator16 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator16);
    int i18 = ringBuffer1.size();
    java.lang.Object obj19 = ringBuffer1.dequeue();
    boolean b20 = ringBuffer1.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj21 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Iterator iterator19 = ringBuffer10.iterator();
    boolean b20 = ringBuffer10.isEmpty();
    boolean b21 = ringBuffer10.isEmpty();
    exercise03.RingBuffer ringBuffer23 = new exercise03.RingBuffer(1);
    boolean b24 = ringBuffer23.isEmpty();
    java.util.Spliterator spliterator25 = ringBuffer23.spliterator();
    java.util.Spliterator spliterator26 = ringBuffer23.spliterator();
    java.util.Iterator iterator27 = ringBuffer23.iterator();
    boolean b28 = ringBuffer23.isEmpty();
    exercise03.RingBuffer ringBuffer30 = new exercise03.RingBuffer(1);
    ringBuffer23.enqueue((java.lang.Object)ringBuffer30);
    exercise03.RingBuffer ringBuffer33 = new exercise03.RingBuffer(1);
    boolean b34 = ringBuffer33.isEmpty();
    java.util.Spliterator spliterator35 = ringBuffer33.spliterator();
    java.util.Spliterator spliterator36 = ringBuffer33.spliterator();
    java.util.Spliterator spliterator37 = ringBuffer33.spliterator();
    java.util.Iterator iterator38 = ringBuffer33.iterator();
    ringBuffer30.enqueue((java.lang.Object)ringBuffer33);
    ringBuffer10.enqueue((java.lang.Object)ringBuffer30);
    java.util.Spliterator spliterator41 = ringBuffer10.spliterator();
    java.util.function.Consumer consumer42 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer10.forEach(consumer42);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator41);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Iterator iterator10 = ringBuffer1.iterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj11 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    java.lang.Object obj17 = ringBuffer1.dequeue();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator23 = ringBuffer19.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator23);
    java.util.function.Consumer consumer25 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    int i7 = ringBuffer1.size();
    int i8 = ringBuffer1.size();
    int i9 = ringBuffer1.size();
    int i10 = ringBuffer1.size();
    java.util.Iterator iterator11 = ringBuffer1.iterator();
    java.util.Iterator iterator12 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer8.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator11 = ringBuffer8.spliterator();
    java.lang.Object obj12 = ringBuffer8.dequeue();
    java.util.Spliterator spliterator13 = ringBuffer8.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator13);
    java.util.Spliterator spliterator15 = ringBuffer1.spliterator();
    int i16 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer18 = new exercise03.RingBuffer(10);
    ringBuffer18.enqueue((java.lang.Object)'#');
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer18);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 'a'+ "'", obj12.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator2 = ringBuffer1.iterator();
    java.util.Iterator iterator3 = ringBuffer1.iterator();
    java.util.function.Consumer consumer4 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator3);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer12 = new exercise03.RingBuffer(1);
    boolean b13 = ringBuffer12.isEmpty();
    java.util.Spliterator spliterator14 = ringBuffer12.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer12.spliterator();
    java.util.Iterator iterator16 = ringBuffer12.iterator();
    boolean b17 = ringBuffer12.isEmpty();
    java.util.Iterator iterator18 = ringBuffer12.iterator();
    exercise03.RingBuffer ringBuffer20 = new exercise03.RingBuffer(1);
    boolean b21 = ringBuffer20.isEmpty();
    java.util.Spliterator spliterator22 = ringBuffer20.spliterator();
    java.util.Spliterator spliterator23 = ringBuffer20.spliterator();
    java.util.Iterator iterator24 = ringBuffer20.iterator();
    boolean b25 = ringBuffer20.isEmpty();
    int i26 = ringBuffer20.size();
    java.util.Spliterator spliterator27 = ringBuffer20.spliterator();
    ringBuffer12.enqueue((java.lang.Object)spliterator27);
    ringBuffer10.enqueue((java.lang.Object)ringBuffer12);
    int i30 = ringBuffer12.size();
    java.util.Iterator iterator31 = ringBuffer12.iterator();
    java.lang.Object obj32 = ringBuffer12.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer12);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj32);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    java.util.Spliterator spliterator16 = ringBuffer10.spliterator();
    int i17 = ringBuffer10.size();
    ringBuffer1.enqueue((java.lang.Object)i17);
    java.util.Iterator iterator19 = ringBuffer1.iterator();
    java.util.function.Consumer consumer20 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)false);
    ringBuffer1.enqueue((java.lang.Object)(short)0);
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    ringBuffer7.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator10 = ringBuffer7.spliterator();
    int i11 = ringBuffer7.size();
    boolean b12 = ringBuffer7.isEmpty();
    boolean b13 = ringBuffer7.isEmpty();
    java.util.Iterator iterator14 = ringBuffer7.iterator();
    int i15 = ringBuffer7.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer7);
    java.util.Iterator iterator17 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer7);
    int i11 = ringBuffer7.size();
    boolean b12 = ringBuffer7.isEmpty();
    exercise03.RingBuffer ringBuffer14 = new exercise03.RingBuffer(1);
    ringBuffer14.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator17 = ringBuffer14.spliterator();
    int i18 = ringBuffer14.size();
    java.util.Spliterator spliterator19 = ringBuffer14.spliterator();
    java.util.Iterator iterator20 = ringBuffer14.iterator();
    ringBuffer7.enqueue((java.lang.Object)iterator20);
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer7.enqueue((java.lang.Object)1.0f);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    boolean b15 = ringBuffer9.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    boolean b17 = ringBuffer1.isEmpty();
    boolean b18 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer19 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.lang.Object obj6 = ringBuffer1.dequeue();
    java.util.function.Consumer consumer7 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 'a'+ "'", obj6.equals('a'));

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    boolean b17 = ringBuffer1.isEmpty();
    boolean b18 = ringBuffer1.isEmpty();
    java.lang.Object obj19 = ringBuffer1.dequeue();
    java.util.Iterator iterator20 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    int i7 = ringBuffer1.size();
    java.lang.Object obj8 = ringBuffer1.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj9 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + '#'+ "'", obj8.equals('#'));

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.function.Consumer consumer19 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)false);
    exercise03.RingBuffer ringBuffer5 = new exercise03.RingBuffer(1);
    java.util.Iterator iterator6 = ringBuffer5.iterator();
    java.util.Iterator iterator7 = ringBuffer5.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator7);
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(10);
    ringBuffer10.enqueue((java.lang.Object)'#');
    int i13 = ringBuffer10.size();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    int i15 = ringBuffer10.size();
    exercise03.RingBuffer ringBuffer17 = new exercise03.RingBuffer(1);
    ringBuffer17.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator20 = ringBuffer17.spliterator();
    java.lang.Object obj21 = ringBuffer17.dequeue();
    java.util.Spliterator spliterator22 = ringBuffer17.spliterator();
    boolean b23 = ringBuffer17.isEmpty();
    int i24 = ringBuffer17.size();
    ringBuffer10.enqueue((java.lang.Object)i24);
    ringBuffer1.enqueue((java.lang.Object)i24);
    java.util.Spliterator spliterator27 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 'a'+ "'", obj21.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    boolean b14 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer17 = new exercise03.RingBuffer(1);
    boolean b18 = ringBuffer17.isEmpty();
    java.util.Spliterator spliterator19 = ringBuffer17.spliterator();
    java.util.Spliterator spliterator20 = ringBuffer17.spliterator();
    java.util.Iterator iterator21 = ringBuffer17.iterator();
    java.util.Iterator iterator22 = ringBuffer17.iterator();
    java.util.Spliterator spliterator23 = ringBuffer17.spliterator();
    java.util.Iterator iterator24 = ringBuffer17.iterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)iterator24);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator24);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    int i10 = ringBuffer1.size();
    int i11 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer13 = new exercise03.RingBuffer(1);
    boolean b14 = ringBuffer13.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer13.spliterator();
    java.util.Spliterator spliterator16 = ringBuffer13.spliterator();
    java.util.Iterator iterator17 = ringBuffer13.iterator();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    ringBuffer13.enqueue((java.lang.Object)spliterator22);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer13);
    int i25 = ringBuffer13.size();
    java.util.function.Consumer consumer26 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer13.forEach(consumer26);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer9.spliterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    int i15 = ringBuffer9.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    java.util.function.Consumer consumer17 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    boolean b3 = ringBuffer1.isEmpty();
    int i4 = ringBuffer1.size();
    java.util.function.Consumer consumer5 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    int i7 = ringBuffer1.size();
    boolean b8 = ringBuffer1.isEmpty();
    boolean b9 = ringBuffer1.isEmpty();
    int i10 = ringBuffer1.size();
    java.util.function.Consumer consumer11 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    boolean b15 = ringBuffer9.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    boolean b17 = ringBuffer1.isEmpty();
    java.lang.Object obj18 = ringBuffer1.dequeue();
    boolean b19 = ringBuffer1.isEmpty();
    boolean b20 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer21 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer11.spliterator();
    java.util.Iterator iterator16 = ringBuffer11.iterator();
    ringBuffer8.enqueue((java.lang.Object)ringBuffer11);
    java.util.Iterator iterator18 = ringBuffer8.iterator();
    java.util.Spliterator spliterator19 = ringBuffer8.spliterator();
    java.util.function.Consumer consumer20 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer8.forEach(consumer20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer8.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator11 = ringBuffer8.spliterator();
    java.lang.Object obj12 = ringBuffer8.dequeue();
    java.util.Spliterator spliterator13 = ringBuffer8.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator13);
    int i15 = ringBuffer1.size();
    int i16 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 'a'+ "'", obj12.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    boolean b3 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer4 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator16 = ringBuffer15.iterator();
    ringBuffer9.enqueue((java.lang.Object)ringBuffer15);
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    java.util.Iterator iterator23 = ringBuffer19.iterator();
    boolean b24 = ringBuffer19.isEmpty();
    int i25 = ringBuffer19.size();
    java.util.Iterator iterator26 = ringBuffer19.iterator();
    exercise03.RingBuffer ringBuffer28 = new exercise03.RingBuffer(1);
    boolean b29 = ringBuffer28.isEmpty();
    java.util.Spliterator spliterator30 = ringBuffer28.spliterator();
    java.util.Spliterator spliterator31 = ringBuffer28.spliterator();
    java.util.Iterator iterator32 = ringBuffer28.iterator();
    boolean b33 = ringBuffer28.isEmpty();
    int i34 = ringBuffer28.size();
    java.util.Spliterator spliterator35 = ringBuffer28.spliterator();
    ringBuffer19.enqueue((java.lang.Object)ringBuffer28);
    java.util.Spliterator spliterator37 = ringBuffer28.spliterator();
    boolean b38 = ringBuffer28.isEmpty();
    ringBuffer15.enqueue((java.lang.Object)b38);
    java.util.Spliterator spliterator40 = ringBuffer15.spliterator();
    exercise03.RingBuffer ringBuffer42 = new exercise03.RingBuffer(1);
    boolean b43 = ringBuffer42.isEmpty();
    java.util.Spliterator spliterator44 = ringBuffer42.spliterator();
    java.util.Spliterator spliterator45 = ringBuffer42.spliterator();
    java.util.Spliterator spliterator46 = ringBuffer42.spliterator();
    java.util.Iterator iterator47 = ringBuffer42.iterator();
    exercise03.RingBuffer ringBuffer49 = new exercise03.RingBuffer(1);
    ringBuffer49.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator52 = ringBuffer49.spliterator();
    java.lang.Object obj53 = ringBuffer49.dequeue();
    java.util.Spliterator spliterator54 = ringBuffer49.spliterator();
    ringBuffer42.enqueue((java.lang.Object)spliterator54);
    java.util.Spliterator spliterator56 = ringBuffer42.spliterator();
    ringBuffer15.enqueue((java.lang.Object)ringBuffer42);
    java.lang.Object obj58 = ringBuffer42.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj53 + "' != '" + 'a'+ "'", obj53.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj58);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    boolean b4 = ringBuffer1.isEmpty();
    boolean b5 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer7.spliterator();
    java.util.Iterator iterator11 = ringBuffer7.iterator();
    java.util.Iterator iterator12 = ringBuffer7.iterator();
    boolean b13 = ringBuffer7.isEmpty();
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(1);
    boolean b16 = ringBuffer15.isEmpty();
    java.util.Spliterator spliterator17 = ringBuffer15.spliterator();
    java.util.Spliterator spliterator18 = ringBuffer15.spliterator();
    ringBuffer7.enqueue((java.lang.Object)ringBuffer15);
    exercise03.RingBuffer ringBuffer21 = new exercise03.RingBuffer(1);
    boolean b22 = ringBuffer21.isEmpty();
    java.util.Spliterator spliterator23 = ringBuffer21.spliterator();
    java.util.Spliterator spliterator24 = ringBuffer21.spliterator();
    java.util.Iterator iterator25 = ringBuffer21.iterator();
    java.util.Iterator iterator26 = ringBuffer21.iterator();
    boolean b27 = ringBuffer21.isEmpty();
    exercise03.RingBuffer ringBuffer29 = new exercise03.RingBuffer(1);
    boolean b30 = ringBuffer29.isEmpty();
    java.util.Spliterator spliterator31 = ringBuffer29.spliterator();
    java.util.Spliterator spliterator32 = ringBuffer29.spliterator();
    ringBuffer21.enqueue((java.lang.Object)ringBuffer29);
    boolean b34 = ringBuffer21.isEmpty();
    java.util.Spliterator spliterator35 = ringBuffer21.spliterator();
    ringBuffer15.enqueue((java.lang.Object)spliterator35);
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer15);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    boolean b8 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(1);
    boolean b16 = ringBuffer15.isEmpty();
    java.util.Spliterator spliterator17 = ringBuffer15.spliterator();
    java.util.Spliterator spliterator18 = ringBuffer15.spliterator();
    java.util.Iterator iterator19 = ringBuffer15.iterator();
    java.util.Iterator iterator20 = ringBuffer15.iterator();
    boolean b21 = ringBuffer15.isEmpty();
    exercise03.RingBuffer ringBuffer23 = new exercise03.RingBuffer(1);
    boolean b24 = ringBuffer23.isEmpty();
    java.util.Spliterator spliterator25 = ringBuffer23.spliterator();
    java.util.Spliterator spliterator26 = ringBuffer23.spliterator();
    ringBuffer15.enqueue((java.lang.Object)ringBuffer23);
    boolean b28 = ringBuffer15.isEmpty();
    java.util.Spliterator spliterator29 = ringBuffer15.spliterator();
    ringBuffer9.enqueue((java.lang.Object)spliterator29);
    int i31 = ringBuffer9.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Iterator iterator19 = ringBuffer10.iterator();
    boolean b20 = ringBuffer10.isEmpty();
    boolean b21 = ringBuffer10.isEmpty();
    int i22 = ringBuffer10.size();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj23 = ringBuffer10.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    int i9 = ringBuffer1.size();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer11 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    int i7 = ringBuffer1.size();
    boolean b8 = ringBuffer1.isEmpty();
    boolean b9 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator11 = ringBuffer1.spliterator();
    java.util.Iterator iterator12 = ringBuffer1.iterator();
    boolean b13 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer14 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    int i10 = ringBuffer1.size();
    boolean b11 = ringBuffer1.isEmpty();
    int i12 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer9.spliterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    int i15 = ringBuffer9.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    java.util.Spliterator spliterator17 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer18 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.lang.Object obj4 = ringBuffer1.dequeue();
    ringBuffer1.enqueue((java.lang.Object)(short)1);
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    boolean b8 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator18 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator19 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator20 = ringBuffer10.spliterator();
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(1);
    boolean b23 = ringBuffer22.isEmpty();
    java.util.Spliterator spliterator24 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator25 = ringBuffer22.spliterator();
    java.util.Iterator iterator26 = ringBuffer22.iterator();
    boolean b27 = ringBuffer22.isEmpty();
    int i28 = ringBuffer22.size();
    java.util.Spliterator spliterator29 = ringBuffer22.spliterator();
    exercise03.RingBuffer ringBuffer31 = new exercise03.RingBuffer(1);
    boolean b32 = ringBuffer31.isEmpty();
    java.util.Spliterator spliterator33 = ringBuffer31.spliterator();
    java.util.Spliterator spliterator34 = ringBuffer31.spliterator();
    java.util.Spliterator spliterator35 = ringBuffer31.spliterator();
    java.util.Iterator iterator36 = ringBuffer31.iterator();
    ringBuffer22.enqueue((java.lang.Object)iterator36);
    ringBuffer10.enqueue((java.lang.Object)iterator36);
    boolean b39 = ringBuffer10.isEmpty();
    int i40 = ringBuffer10.size();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)i40);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 'a'+ "'", obj4.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    boolean b10 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer12 = new exercise03.RingBuffer(1);
    ringBuffer12.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator15 = ringBuffer12.spliterator();
    int i16 = ringBuffer12.size();
    java.util.Spliterator spliterator17 = ringBuffer12.spliterator();
    java.util.Iterator iterator18 = ringBuffer12.iterator();
    java.util.Spliterator spliterator19 = ringBuffer12.spliterator();
    java.lang.Object obj20 = ringBuffer12.dequeue();
    int i21 = ringBuffer12.size();
    ringBuffer1.enqueue((java.lang.Object)i21);
    java.util.Spliterator spliterator23 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator24 = ringBuffer1.spliterator();
    java.util.Iterator iterator25 = ringBuffer1.iterator();
    boolean b26 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 'a'+ "'", obj20.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Iterator iterator4 = ringBuffer1.iterator();
    java.lang.Object obj5 = ringBuffer1.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj6 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 'a'+ "'", obj5.equals('a'));

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    boolean b11 = ringBuffer1.isEmpty();
    int i12 = ringBuffer1.size();
    java.util.function.Consumer consumer13 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer9.spliterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    int i15 = ringBuffer9.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    java.util.Spliterator spliterator17 = ringBuffer1.spliterator();
    java.lang.Object obj18 = ringBuffer1.dequeue();
    java.util.Spliterator spliterator19 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    boolean b14 = ringBuffer1.isEmpty();
    java.util.Iterator iterator15 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer17 = new exercise03.RingBuffer(1);
    ringBuffer17.enqueue((java.lang.Object)'a');
    java.util.Iterator iterator20 = ringBuffer17.iterator();
    java.lang.Object obj21 = ringBuffer17.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer17);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 'a'+ "'", obj21.equals('a'));

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(0);
    java.util.Spliterator spliterator2 = ringBuffer1.spliterator();
    java.util.Iterator iterator3 = ringBuffer1.iterator();
    int i4 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Iterator iterator9 = ringBuffer1.iterator();
    int i10 = ringBuffer1.size();
    java.util.Iterator iterator11 = ringBuffer1.iterator();
    boolean b12 = ringBuffer1.isEmpty();
    java.util.Iterator iterator13 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(1);
    boolean b16 = ringBuffer15.isEmpty();
    java.util.Spliterator spliterator17 = ringBuffer15.spliterator();
    java.util.Spliterator spliterator18 = ringBuffer15.spliterator();
    java.util.Spliterator spliterator19 = ringBuffer15.spliterator();
    java.util.Iterator iterator20 = ringBuffer15.iterator();
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(1);
    ringBuffer22.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator25 = ringBuffer22.spliterator();
    java.lang.Object obj26 = ringBuffer22.dequeue();
    java.util.Spliterator spliterator27 = ringBuffer22.spliterator();
    ringBuffer15.enqueue((java.lang.Object)spliterator27);
    java.lang.Object obj29 = ringBuffer15.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer15);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 'a'+ "'", obj26.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    int i9 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    java.util.Iterator iterator16 = ringBuffer11.iterator();
    boolean b17 = ringBuffer11.isEmpty();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    ringBuffer11.enqueue((java.lang.Object)ringBuffer19);
    boolean b24 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator25 = ringBuffer11.spliterator();
    boolean b26 = ringBuffer11.isEmpty();
    java.lang.Object obj27 = ringBuffer11.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer11);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    boolean b16 = ringBuffer10.isEmpty();
    exercise03.RingBuffer ringBuffer18 = new exercise03.RingBuffer(1);
    boolean b19 = ringBuffer18.isEmpty();
    java.util.Spliterator spliterator20 = ringBuffer18.spliterator();
    java.util.Spliterator spliterator21 = ringBuffer18.spliterator();
    ringBuffer10.enqueue((java.lang.Object)ringBuffer18);
    java.util.Iterator iterator23 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.lang.Object obj25 = ringBuffer1.dequeue();
    java.util.function.Consumer consumer26 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer26);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    boolean b6 = ringBuffer1.isEmpty();
    boolean b7 = ringBuffer1.isEmpty();
    boolean b8 = ringBuffer1.isEmpty();
    boolean b9 = ringBuffer1.isEmpty();
    int i10 = ringBuffer1.size();
    boolean b11 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer14 = new exercise03.RingBuffer(1);
    boolean b15 = ringBuffer14.isEmpty();
    java.util.Spliterator spliterator16 = ringBuffer14.spliterator();
    java.util.Spliterator spliterator17 = ringBuffer14.spliterator();
    java.util.Iterator iterator18 = ringBuffer14.iterator();
    boolean b19 = ringBuffer14.isEmpty();
    java.util.Iterator iterator20 = ringBuffer14.iterator();
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(1);
    boolean b23 = ringBuffer22.isEmpty();
    java.util.Spliterator spliterator24 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator25 = ringBuffer22.spliterator();
    java.util.Iterator iterator26 = ringBuffer22.iterator();
    boolean b27 = ringBuffer22.isEmpty();
    int i28 = ringBuffer22.size();
    java.util.Spliterator spliterator29 = ringBuffer22.spliterator();
    ringBuffer14.enqueue((java.lang.Object)spliterator29);
    int i31 = ringBuffer14.size();
    java.lang.Object obj32 = ringBuffer14.dequeue();
    boolean b33 = ringBuffer14.isEmpty();
    exercise03.RingBuffer ringBuffer35 = new exercise03.RingBuffer(1);
    ringBuffer35.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator38 = ringBuffer35.spliterator();
    int i39 = ringBuffer35.size();
    java.util.Spliterator spliterator40 = ringBuffer35.spliterator();
    java.util.Iterator iterator41 = ringBuffer35.iterator();
    java.util.Spliterator spliterator42 = ringBuffer35.spliterator();
    java.util.Iterator iterator43 = ringBuffer35.iterator();
    ringBuffer14.enqueue((java.lang.Object)iterator43);
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)iterator43);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator43);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    boolean b11 = ringBuffer1.isEmpty();
    int i12 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer14 = new exercise03.RingBuffer(1);
    boolean b15 = ringBuffer14.isEmpty();
    java.util.Spliterator spliterator16 = ringBuffer14.spliterator();
    java.util.Spliterator spliterator17 = ringBuffer14.spliterator();
    java.util.Iterator iterator18 = ringBuffer14.iterator();
    boolean b19 = ringBuffer14.isEmpty();
    int i20 = ringBuffer14.size();
    java.util.Spliterator spliterator21 = ringBuffer14.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer14.spliterator();
    java.util.Iterator iterator23 = ringBuffer14.iterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer14);
    java.util.function.Consumer consumer25 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(100);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator9);
    boolean b11 = ringBuffer1.isEmpty();
    int i12 = ringBuffer1.size();
    java.util.Spliterator spliterator13 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj8 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    boolean b14 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer1.spliterator();
    boolean b16 = ringBuffer1.isEmpty();
    java.lang.Object obj17 = ringBuffer1.dequeue();
    java.util.Spliterator spliterator18 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator19 = ringBuffer1.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj20 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(0);
    java.util.Spliterator spliterator2 = ringBuffer1.spliterator();
    boolean b3 = ringBuffer1.isEmpty();
    java.util.Iterator iterator4 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator4);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator16 = ringBuffer15.iterator();
    ringBuffer9.enqueue((java.lang.Object)ringBuffer15);
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    java.util.Iterator iterator23 = ringBuffer19.iterator();
    boolean b24 = ringBuffer19.isEmpty();
    int i25 = ringBuffer19.size();
    java.util.Iterator iterator26 = ringBuffer19.iterator();
    exercise03.RingBuffer ringBuffer28 = new exercise03.RingBuffer(1);
    boolean b29 = ringBuffer28.isEmpty();
    java.util.Spliterator spliterator30 = ringBuffer28.spliterator();
    java.util.Spliterator spliterator31 = ringBuffer28.spliterator();
    java.util.Iterator iterator32 = ringBuffer28.iterator();
    boolean b33 = ringBuffer28.isEmpty();
    int i34 = ringBuffer28.size();
    java.util.Spliterator spliterator35 = ringBuffer28.spliterator();
    ringBuffer19.enqueue((java.lang.Object)ringBuffer28);
    java.util.Spliterator spliterator37 = ringBuffer28.spliterator();
    boolean b38 = ringBuffer28.isEmpty();
    ringBuffer15.enqueue((java.lang.Object)b38);
    java.util.Spliterator spliterator40 = ringBuffer15.spliterator();
    exercise03.RingBuffer ringBuffer42 = new exercise03.RingBuffer(1);
    boolean b43 = ringBuffer42.isEmpty();
    java.util.Spliterator spliterator44 = ringBuffer42.spliterator();
    java.util.Spliterator spliterator45 = ringBuffer42.spliterator();
    java.util.Spliterator spliterator46 = ringBuffer42.spliterator();
    java.util.Iterator iterator47 = ringBuffer42.iterator();
    exercise03.RingBuffer ringBuffer49 = new exercise03.RingBuffer(1);
    ringBuffer49.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator52 = ringBuffer49.spliterator();
    java.lang.Object obj53 = ringBuffer49.dequeue();
    java.util.Spliterator spliterator54 = ringBuffer49.spliterator();
    ringBuffer42.enqueue((java.lang.Object)spliterator54);
    java.util.Spliterator spliterator56 = ringBuffer42.spliterator();
    ringBuffer15.enqueue((java.lang.Object)ringBuffer42);
    java.util.Iterator iterator58 = ringBuffer15.iterator();
    int i59 = ringBuffer15.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj53 + "' != '" + 'a'+ "'", obj53.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 2);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    int i9 = ringBuffer1.size();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj10 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    java.util.Spliterator spliterator2 = ringBuffer1.spliterator();
    int i3 = ringBuffer1.size();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj4 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    java.lang.Object obj4 = ringBuffer1.dequeue();
    exercise03.RingBuffer ringBuffer6 = new exercise03.RingBuffer(1);
    boolean b7 = ringBuffer6.isEmpty();
    java.util.Spliterator spliterator8 = ringBuffer6.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer6.spliterator();
    java.util.Iterator iterator10 = ringBuffer6.iterator();
    boolean b11 = ringBuffer6.isEmpty();
    java.util.Iterator iterator12 = ringBuffer6.iterator();
    exercise03.RingBuffer ringBuffer14 = new exercise03.RingBuffer(1);
    boolean b15 = ringBuffer14.isEmpty();
    java.util.Spliterator spliterator16 = ringBuffer14.spliterator();
    java.util.Spliterator spliterator17 = ringBuffer14.spliterator();
    java.util.Iterator iterator18 = ringBuffer14.iterator();
    java.util.Iterator iterator19 = ringBuffer14.iterator();
    boolean b20 = ringBuffer14.isEmpty();
    ringBuffer6.enqueue((java.lang.Object)ringBuffer14);
    boolean b22 = ringBuffer6.isEmpty();
    java.lang.Object obj23 = ringBuffer6.dequeue();
    ringBuffer1.enqueue(obj23);
    java.util.function.Consumer consumer25 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + '#'+ "'", obj4.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj23);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    boolean b7 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    int i9 = ringBuffer1.size();
    int i10 = ringBuffer1.size();
    boolean b11 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer13 = new exercise03.RingBuffer(1);
    boolean b14 = ringBuffer13.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer13.spliterator();
    java.util.Spliterator spliterator16 = ringBuffer13.spliterator();
    java.util.Iterator iterator17 = ringBuffer13.iterator();
    boolean b18 = ringBuffer13.isEmpty();
    int i19 = ringBuffer13.size();
    java.lang.Object obj20 = null;
    ringBuffer13.enqueue(obj20);
    ringBuffer1.enqueue(obj20);
    java.util.function.Consumer consumer23 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Iterator iterator9 = ringBuffer1.iterator();
    int i10 = ringBuffer1.size();
    java.util.Iterator iterator11 = ringBuffer1.iterator();
    boolean b12 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer14 = new exercise03.RingBuffer(1);
    boolean b15 = ringBuffer14.isEmpty();
    java.util.Spliterator spliterator16 = ringBuffer14.spliterator();
    java.util.Spliterator spliterator17 = ringBuffer14.spliterator();
    java.util.Iterator iterator18 = ringBuffer14.iterator();
    boolean b19 = ringBuffer14.isEmpty();
    int i20 = ringBuffer14.size();
    java.util.Iterator iterator21 = ringBuffer14.iterator();
    exercise03.RingBuffer ringBuffer23 = new exercise03.RingBuffer(1);
    boolean b24 = ringBuffer23.isEmpty();
    java.util.Spliterator spliterator25 = ringBuffer23.spliterator();
    java.util.Spliterator spliterator26 = ringBuffer23.spliterator();
    java.util.Iterator iterator27 = ringBuffer23.iterator();
    boolean b28 = ringBuffer23.isEmpty();
    int i29 = ringBuffer23.size();
    java.util.Spliterator spliterator30 = ringBuffer23.spliterator();
    ringBuffer14.enqueue((java.lang.Object)ringBuffer23);
    java.util.Iterator iterator32 = ringBuffer23.iterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)iterator32);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator32);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    boolean b6 = ringBuffer1.isEmpty();
    boolean b7 = ringBuffer1.isEmpty();
    boolean b8 = ringBuffer1.isEmpty();
    boolean b9 = ringBuffer1.isEmpty();
    java.lang.Object obj10 = ringBuffer1.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj11 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 'a'+ "'", obj10.equals('a'));

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj11 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    boolean b6 = ringBuffer1.isEmpty();
    boolean b7 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer8 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    boolean b4 = ringBuffer1.isEmpty();
    boolean b5 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    int i7 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer7);
    int i11 = ringBuffer7.size();
    boolean b12 = ringBuffer7.isEmpty();
    exercise03.RingBuffer ringBuffer14 = new exercise03.RingBuffer(1);
    ringBuffer14.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator17 = ringBuffer14.spliterator();
    int i18 = ringBuffer14.size();
    java.util.Spliterator spliterator19 = ringBuffer14.spliterator();
    java.util.Iterator iterator20 = ringBuffer14.iterator();
    ringBuffer7.enqueue((java.lang.Object)iterator20);
    boolean b22 = ringBuffer7.isEmpty();
    java.lang.Object obj23 = ringBuffer7.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj23);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    boolean b16 = ringBuffer11.isEmpty();
    int i17 = ringBuffer11.size();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    ringBuffer3.enqueue((java.lang.Object)spliterator18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer3);
    java.lang.Object obj21 = ringBuffer3.dequeue();
    java.util.Spliterator spliterator22 = ringBuffer3.spliterator();
    boolean b23 = ringBuffer3.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Spliterator spliterator19 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator20 = ringBuffer10.spliterator();
    java.util.function.Consumer consumer21 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer10.forEach(consumer21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    boolean b8 = ringBuffer1.isEmpty();
    boolean b9 = ringBuffer1.isEmpty();
    int i10 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Iterator iterator4 = ringBuffer1.iterator();
    java.lang.Object obj5 = ringBuffer1.dequeue();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 'a'+ "'", obj5.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Iterator iterator4 = ringBuffer1.iterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    int i6 = ringBuffer1.size();
    int i7 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)(short)0);
    int i5 = ringBuffer1.size();
    boolean b6 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.lang.Object obj8 = null;
    ringBuffer1.enqueue(obj8);
    boolean b10 = ringBuffer1.isEmpty();
    boolean b11 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Iterator iterator3 = ringBuffer1.iterator();
    boolean b4 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer6 = new exercise03.RingBuffer(1);
    boolean b7 = ringBuffer6.isEmpty();
    java.util.Spliterator spliterator8 = ringBuffer6.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer6.spliterator();
    java.util.Iterator iterator10 = ringBuffer6.iterator();
    java.util.Iterator iterator11 = ringBuffer6.iterator();
    boolean b12 = ringBuffer6.isEmpty();
    exercise03.RingBuffer ringBuffer14 = new exercise03.RingBuffer(1);
    boolean b15 = ringBuffer14.isEmpty();
    java.util.Spliterator spliterator16 = ringBuffer14.spliterator();
    java.util.Spliterator spliterator17 = ringBuffer14.spliterator();
    ringBuffer6.enqueue((java.lang.Object)ringBuffer14);
    exercise03.RingBuffer ringBuffer20 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator21 = ringBuffer20.iterator();
    ringBuffer14.enqueue((java.lang.Object)ringBuffer20);
    exercise03.RingBuffer ringBuffer24 = new exercise03.RingBuffer(1);
    boolean b25 = ringBuffer24.isEmpty();
    java.util.Spliterator spliterator26 = ringBuffer24.spliterator();
    java.util.Spliterator spliterator27 = ringBuffer24.spliterator();
    java.util.Iterator iterator28 = ringBuffer24.iterator();
    boolean b29 = ringBuffer24.isEmpty();
    int i30 = ringBuffer24.size();
    java.util.Iterator iterator31 = ringBuffer24.iterator();
    exercise03.RingBuffer ringBuffer33 = new exercise03.RingBuffer(1);
    boolean b34 = ringBuffer33.isEmpty();
    java.util.Spliterator spliterator35 = ringBuffer33.spliterator();
    java.util.Spliterator spliterator36 = ringBuffer33.spliterator();
    java.util.Iterator iterator37 = ringBuffer33.iterator();
    boolean b38 = ringBuffer33.isEmpty();
    int i39 = ringBuffer33.size();
    java.util.Spliterator spliterator40 = ringBuffer33.spliterator();
    ringBuffer24.enqueue((java.lang.Object)ringBuffer33);
    java.util.Spliterator spliterator42 = ringBuffer33.spliterator();
    boolean b43 = ringBuffer33.isEmpty();
    ringBuffer20.enqueue((java.lang.Object)b43);
    java.util.Spliterator spliterator45 = ringBuffer20.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator45);
    exercise03.RingBuffer ringBuffer48 = new exercise03.RingBuffer(1);
    boolean b49 = ringBuffer48.isEmpty();
    java.util.Spliterator spliterator50 = ringBuffer48.spliterator();
    java.util.Spliterator spliterator51 = ringBuffer48.spliterator();
    java.util.Iterator iterator52 = ringBuffer48.iterator();
    java.util.Iterator iterator53 = ringBuffer48.iterator();
    boolean b54 = ringBuffer48.isEmpty();
    exercise03.RingBuffer ringBuffer56 = new exercise03.RingBuffer(1);
    boolean b57 = ringBuffer56.isEmpty();
    java.util.Spliterator spliterator58 = ringBuffer56.spliterator();
    java.util.Spliterator spliterator59 = ringBuffer56.spliterator();
    ringBuffer48.enqueue((java.lang.Object)ringBuffer56);
    exercise03.RingBuffer ringBuffer62 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator63 = ringBuffer62.iterator();
    ringBuffer56.enqueue((java.lang.Object)ringBuffer62);
    boolean b65 = ringBuffer56.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)b65);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(2);
    boolean b2 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(0);
    java.util.function.Consumer consumer2 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    boolean b4 = ringBuffer1.isEmpty();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    int i9 = ringBuffer1.size();
    int i10 = ringBuffer1.size();
    boolean b11 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer13 = new exercise03.RingBuffer(1);
    boolean b14 = ringBuffer13.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer13.spliterator();
    java.util.Spliterator spliterator16 = ringBuffer13.spliterator();
    java.util.Iterator iterator17 = ringBuffer13.iterator();
    boolean b18 = ringBuffer13.isEmpty();
    int i19 = ringBuffer13.size();
    java.lang.Object obj20 = null;
    ringBuffer13.enqueue(obj20);
    ringBuffer1.enqueue(obj20);
    exercise03.RingBuffer ringBuffer24 = new exercise03.RingBuffer(1);
    ringBuffer24.enqueue((java.lang.Object)'a');
    java.lang.Object obj27 = ringBuffer24.dequeue();
    java.util.Spliterator spliterator28 = ringBuffer24.spliterator();
    java.util.Iterator iterator29 = ringBuffer24.iterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)iterator29);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 'a'+ "'", obj27.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator29);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer7);
    int i11 = ringBuffer7.size();
    boolean b12 = ringBuffer7.isEmpty();
    exercise03.RingBuffer ringBuffer14 = new exercise03.RingBuffer(1);
    ringBuffer14.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator17 = ringBuffer14.spliterator();
    int i18 = ringBuffer14.size();
    java.util.Spliterator spliterator19 = ringBuffer14.spliterator();
    java.util.Iterator iterator20 = ringBuffer14.iterator();
    ringBuffer7.enqueue((java.lang.Object)iterator20);
    int i22 = ringBuffer7.size();
    java.util.Spliterator spliterator23 = ringBuffer7.spliterator();
    boolean b24 = ringBuffer7.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    int i14 = ringBuffer9.size();
    java.lang.Object obj15 = null;
    ringBuffer9.enqueue(obj15);
    java.util.function.Consumer consumer17 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer9.forEach(consumer17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer11 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(100);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator9);
    boolean b11 = ringBuffer1.isEmpty();
    int i12 = ringBuffer1.size();
    int i13 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Iterator iterator11 = ringBuffer1.iterator();
    java.util.function.Consumer consumer12 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    java.lang.Object obj17 = ringBuffer1.dequeue();
    java.util.Spliterator spliterator18 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    int i6 = ringBuffer1.size();
    java.lang.Object obj7 = ringBuffer1.dequeue();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    int i10 = ringBuffer1.size();
    int i11 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + '#'+ "'", obj7.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer9.spliterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    int i15 = ringBuffer9.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    java.util.Iterator iterator17 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    java.util.Iterator iterator20 = ringBuffer19.iterator();
    java.util.Iterator iterator21 = ringBuffer19.iterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer19);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)(byte)1);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    int i7 = ringBuffer1.size();
    boolean b8 = ringBuffer1.isEmpty();
    boolean b9 = ringBuffer1.isEmpty();
    int i10 = ringBuffer1.size();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj11 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Iterator iterator4 = ringBuffer1.iterator();
    java.util.function.Consumer consumer5 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator4);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    boolean b16 = ringBuffer10.isEmpty();
    exercise03.RingBuffer ringBuffer18 = new exercise03.RingBuffer(1);
    boolean b19 = ringBuffer18.isEmpty();
    java.util.Spliterator spliterator20 = ringBuffer18.spliterator();
    java.util.Spliterator spliterator21 = ringBuffer18.spliterator();
    ringBuffer10.enqueue((java.lang.Object)ringBuffer18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer18);
    int i24 = ringBuffer1.size();
    java.util.Iterator iterator25 = ringBuffer1.iterator();
    java.util.function.Consumer consumer26 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer26);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator25);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    int i7 = ringBuffer1.size();
    boolean b8 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.function.Consumer consumer6 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    boolean b16 = ringBuffer11.isEmpty();
    int i17 = ringBuffer11.size();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)spliterator18);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(0);
    java.util.Spliterator spliterator2 = ringBuffer1.spliterator();
    java.util.Iterator iterator3 = ringBuffer1.iterator();
    java.util.Iterator iterator4 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator4);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    boolean b14 = ringBuffer1.isEmpty();
    boolean b15 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer16 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer7.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator10);
    java.util.Spliterator spliterator12 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer14 = new exercise03.RingBuffer(1);
    ringBuffer14.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator17 = ringBuffer14.spliterator();
    int i18 = ringBuffer14.size();
    boolean b19 = ringBuffer14.isEmpty();
    java.lang.Object obj20 = ringBuffer14.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue(obj20);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 'a'+ "'", obj20.equals('a'));

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    java.lang.Object obj10 = null;
    ringBuffer8.enqueue(obj10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    boolean b10 = ringBuffer8.isEmpty();
    boolean b11 = ringBuffer8.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj12 = ringBuffer8.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    boolean b16 = ringBuffer11.isEmpty();
    int i17 = ringBuffer11.size();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    ringBuffer3.enqueue((java.lang.Object)spliterator18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer3);
    int i21 = ringBuffer3.size();
    boolean b22 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator23 = ringBuffer3.spliterator();
    int i24 = ringBuffer3.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    boolean b16 = ringBuffer11.isEmpty();
    int i17 = ringBuffer11.size();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    ringBuffer3.enqueue((java.lang.Object)spliterator18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer3);
    java.util.Iterator iterator21 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator21);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    int i9 = ringBuffer1.size();
    boolean b10 = ringBuffer1.isEmpty();
    java.util.Iterator iterator11 = ringBuffer1.iterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj12 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Iterator iterator3 = ringBuffer1.iterator();
    boolean b4 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    boolean b16 = ringBuffer11.isEmpty();
    int i17 = ringBuffer11.size();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    ringBuffer3.enqueue((java.lang.Object)spliterator18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer3);
    java.lang.Object obj21 = ringBuffer3.dequeue();
    exercise03.RingBuffer ringBuffer23 = new exercise03.RingBuffer(10);
    ringBuffer23.enqueue((java.lang.Object)'#');
    java.lang.Object obj26 = ringBuffer23.dequeue();
    exercise03.RingBuffer ringBuffer28 = new exercise03.RingBuffer(1);
    ringBuffer28.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator31 = ringBuffer28.spliterator();
    int i32 = ringBuffer28.size();
    java.util.Spliterator spliterator33 = ringBuffer28.spliterator();
    ringBuffer23.enqueue((java.lang.Object)spliterator33);
    ringBuffer3.enqueue((java.lang.Object)spliterator33);
    java.lang.Object obj36 = ringBuffer3.dequeue();
    boolean b37 = ringBuffer3.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj26 + "' != '" + '#'+ "'", obj26.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    java.util.Spliterator spliterator16 = ringBuffer10.spliterator();
    int i17 = ringBuffer10.size();
    ringBuffer1.enqueue((java.lang.Object)i17);
    java.util.Spliterator spliterator19 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    boolean b5 = ringBuffer1.isEmpty();
    int i6 = ringBuffer1.size();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    int i14 = ringBuffer9.size();
    boolean b15 = ringBuffer9.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj16 = ringBuffer9.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator16 = ringBuffer15.iterator();
    ringBuffer9.enqueue((java.lang.Object)ringBuffer15);
    java.util.Iterator iterator18 = ringBuffer15.iterator();
    boolean b19 = ringBuffer15.isEmpty();
    java.util.Spliterator spliterator20 = ringBuffer15.spliterator();
    java.util.Spliterator spliterator21 = ringBuffer15.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj22 = ringBuffer15.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    int i6 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer8.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator11 = ringBuffer8.spliterator();
    java.lang.Object obj12 = ringBuffer8.dequeue();
    java.util.Spliterator spliterator13 = ringBuffer8.spliterator();
    boolean b14 = ringBuffer8.isEmpty();
    int i15 = ringBuffer8.size();
    ringBuffer1.enqueue((java.lang.Object)i15);
    java.util.Iterator iterator17 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 'a'+ "'", obj12.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Iterator iterator19 = ringBuffer10.iterator();
    boolean b20 = ringBuffer10.isEmpty();
    boolean b21 = ringBuffer10.isEmpty();
    exercise03.RingBuffer ringBuffer23 = new exercise03.RingBuffer(1);
    boolean b24 = ringBuffer23.isEmpty();
    java.util.Spliterator spliterator25 = ringBuffer23.spliterator();
    java.util.Spliterator spliterator26 = ringBuffer23.spliterator();
    java.util.Iterator iterator27 = ringBuffer23.iterator();
    boolean b28 = ringBuffer23.isEmpty();
    exercise03.RingBuffer ringBuffer30 = new exercise03.RingBuffer(1);
    ringBuffer23.enqueue((java.lang.Object)ringBuffer30);
    exercise03.RingBuffer ringBuffer33 = new exercise03.RingBuffer(1);
    boolean b34 = ringBuffer33.isEmpty();
    java.util.Spliterator spliterator35 = ringBuffer33.spliterator();
    java.util.Spliterator spliterator36 = ringBuffer33.spliterator();
    java.util.Spliterator spliterator37 = ringBuffer33.spliterator();
    java.util.Iterator iterator38 = ringBuffer33.iterator();
    ringBuffer30.enqueue((java.lang.Object)ringBuffer33);
    ringBuffer10.enqueue((java.lang.Object)ringBuffer30);
    java.util.Spliterator spliterator41 = ringBuffer10.spliterator();
    java.util.Iterator iterator42 = ringBuffer10.iterator();
    java.util.Iterator iterator43 = ringBuffer10.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator43);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer10 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer9 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.lang.Object obj5 = ringBuffer1.dequeue();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer7.spliterator();
    java.util.Iterator iterator11 = ringBuffer7.iterator();
    java.util.Iterator iterator12 = ringBuffer7.iterator();
    boolean b13 = ringBuffer7.isEmpty();
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(1);
    boolean b16 = ringBuffer15.isEmpty();
    java.util.Spliterator spliterator17 = ringBuffer15.spliterator();
    java.util.Spliterator spliterator18 = ringBuffer15.spliterator();
    ringBuffer7.enqueue((java.lang.Object)ringBuffer15);
    exercise03.RingBuffer ringBuffer21 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator22 = ringBuffer21.iterator();
    ringBuffer15.enqueue((java.lang.Object)ringBuffer21);
    java.util.Iterator iterator24 = ringBuffer21.iterator();
    boolean b25 = ringBuffer21.isEmpty();
    java.util.Spliterator spliterator26 = ringBuffer21.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer21);
    java.util.Spliterator spliterator28 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 'a'+ "'", obj5.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator16 = ringBuffer15.iterator();
    ringBuffer9.enqueue((java.lang.Object)ringBuffer15);
    java.util.function.Consumer consumer18 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer9.forEach(consumer18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(100);
    java.util.Spliterator spliterator2 = ringBuffer1.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj3 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator2);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    boolean b16 = ringBuffer11.isEmpty();
    int i17 = ringBuffer11.size();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    ringBuffer3.enqueue((java.lang.Object)spliterator18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer3);
    int i21 = ringBuffer3.size();
    boolean b22 = ringBuffer3.isEmpty();
    exercise03.RingBuffer ringBuffer24 = new exercise03.RingBuffer(1);
    ringBuffer24.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator27 = ringBuffer24.spliterator();
    int i28 = ringBuffer24.size();
    java.util.Spliterator spliterator29 = ringBuffer24.spliterator();
    int i30 = ringBuffer24.size();
    int i31 = ringBuffer24.size();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer3.enqueue((java.lang.Object)ringBuffer24);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Iterator iterator19 = ringBuffer10.iterator();
    boolean b20 = ringBuffer10.isEmpty();
    boolean b21 = ringBuffer10.isEmpty();
    boolean b22 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator23 = ringBuffer10.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    boolean b17 = ringBuffer1.isEmpty();
    boolean b18 = ringBuffer1.isEmpty();
    java.lang.Object obj19 = ringBuffer1.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj20 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    boolean b5 = ringBuffer1.isEmpty();
    int i6 = ringBuffer1.size();
    java.util.function.Consumer consumer7 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    boolean b4 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer6 = new exercise03.RingBuffer(1);
    boolean b7 = ringBuffer6.isEmpty();
    java.util.Spliterator spliterator8 = ringBuffer6.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer6.spliterator();
    java.util.Iterator iterator10 = ringBuffer6.iterator();
    java.util.Iterator iterator11 = ringBuffer6.iterator();
    java.util.Spliterator spliterator12 = ringBuffer6.spliterator();
    int i13 = ringBuffer6.size();
    java.util.Spliterator spliterator14 = ringBuffer6.spliterator();
    exercise03.RingBuffer ringBuffer16 = new exercise03.RingBuffer(10);
    ringBuffer16.enqueue((java.lang.Object)'#');
    java.util.Iterator iterator19 = ringBuffer16.iterator();
    ringBuffer6.enqueue((java.lang.Object)ringBuffer16);
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer6);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    int i10 = ringBuffer1.size();
    int i11 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer13 = new exercise03.RingBuffer(1);
    boolean b14 = ringBuffer13.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer13.spliterator();
    java.util.Spliterator spliterator16 = ringBuffer13.spliterator();
    java.util.Iterator iterator17 = ringBuffer13.iterator();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    ringBuffer13.enqueue((java.lang.Object)spliterator22);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer13);
    java.lang.Object obj25 = ringBuffer13.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    boolean b9 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer10 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.function.Consumer consumer8 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer3 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    int i7 = ringBuffer1.size();
    boolean b8 = ringBuffer1.isEmpty();
    boolean b9 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator11 = ringBuffer1.spliterator();
    java.util.Iterator iterator12 = ringBuffer1.iterator();
    boolean b13 = ringBuffer1.isEmpty();
    boolean b14 = ringBuffer1.isEmpty();
    int i15 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    boolean b15 = ringBuffer9.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    java.util.Spliterator spliterator17 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator18 = ringBuffer9.spliterator();
    java.util.function.Consumer consumer19 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer9.forEach(consumer19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    int i9 = ringBuffer1.size();
    boolean b10 = ringBuffer1.isEmpty();
    java.util.Iterator iterator11 = ringBuffer1.iterator();
    java.util.function.Consumer consumer12 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer11.spliterator();
    java.util.Iterator iterator16 = ringBuffer11.iterator();
    ringBuffer8.enqueue((java.lang.Object)ringBuffer11);
    java.util.Spliterator spliterator18 = ringBuffer8.spliterator();
    java.util.Spliterator spliterator19 = ringBuffer8.spliterator();
    boolean b20 = ringBuffer8.isEmpty();
    java.lang.Object obj21 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer8.enqueue(obj21);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)false);
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer6 = new exercise03.RingBuffer(1);
    ringBuffer6.enqueue((java.lang.Object)'a');
    java.lang.Object obj9 = ringBuffer6.dequeue();
    java.util.Spliterator spliterator10 = ringBuffer6.spliterator();
    java.lang.Object obj11 = null;
    ringBuffer6.enqueue(obj11);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 'a'+ "'", obj9.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    boolean b9 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(2);
    java.util.function.Consumer consumer2 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    int i7 = ringBuffer1.size();
    boolean b8 = ringBuffer1.isEmpty();
    boolean b9 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator11 = ringBuffer1.spliterator();
    java.util.Iterator iterator12 = ringBuffer1.iterator();
    boolean b13 = ringBuffer1.isEmpty();
    boolean b14 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer15 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    boolean b9 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    ringBuffer11.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    int i15 = ringBuffer11.size();
    java.util.Spliterator spliterator16 = ringBuffer11.spliterator();
    java.util.Iterator iterator17 = ringBuffer11.iterator();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    java.util.Iterator iterator19 = ringBuffer11.iterator();
    int i20 = ringBuffer11.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer11);
    java.util.Iterator iterator22 = ringBuffer11.iterator();
    java.util.function.Consumer consumer23 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer11.forEach(consumer23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    boolean b10 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer12 = new exercise03.RingBuffer(1);
    ringBuffer12.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator15 = ringBuffer12.spliterator();
    int i16 = ringBuffer12.size();
    java.util.Spliterator spliterator17 = ringBuffer12.spliterator();
    java.util.Iterator iterator18 = ringBuffer12.iterator();
    java.util.Spliterator spliterator19 = ringBuffer12.spliterator();
    java.lang.Object obj20 = ringBuffer12.dequeue();
    int i21 = ringBuffer12.size();
    ringBuffer1.enqueue((java.lang.Object)i21);
    java.util.Spliterator spliterator23 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer25 = new exercise03.RingBuffer(1);
    ringBuffer25.enqueue((java.lang.Object)'a');
    java.lang.Object obj28 = ringBuffer25.dequeue();
    java.util.Spliterator spliterator29 = ringBuffer25.spliterator();
    java.lang.Object obj30 = null;
    ringBuffer25.enqueue(obj30);
    java.util.Spliterator spliterator32 = ringBuffer25.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)spliterator32);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 'a'+ "'", obj20.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 'a'+ "'", obj28.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator32);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    boolean b4 = ringBuffer1.isEmpty();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.lang.Object obj6 = ringBuffer1.dequeue();
    int i7 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 'a'+ "'", obj6.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator16 = ringBuffer15.iterator();
    ringBuffer9.enqueue((java.lang.Object)ringBuffer15);
    java.util.Iterator iterator18 = ringBuffer15.iterator();
    java.util.Spliterator spliterator19 = ringBuffer15.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    boolean b6 = ringBuffer1.isEmpty();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(10);
    ringBuffer10.enqueue((java.lang.Object)'#');
    java.util.Iterator iterator13 = ringBuffer10.iterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)iterator13);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj6 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    int i3 = ringBuffer1.size();
    java.util.function.Consumer consumer4 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    boolean b16 = ringBuffer11.isEmpty();
    int i17 = ringBuffer11.size();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    ringBuffer3.enqueue((java.lang.Object)spliterator18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer3);
    int i21 = ringBuffer3.size();
    boolean b22 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator23 = ringBuffer3.spliterator();
    exercise03.RingBuffer ringBuffer25 = new exercise03.RingBuffer(1);
    boolean b26 = ringBuffer25.isEmpty();
    java.util.Spliterator spliterator27 = ringBuffer25.spliterator();
    java.util.Spliterator spliterator28 = ringBuffer25.spliterator();
    java.util.Iterator iterator29 = ringBuffer25.iterator();
    boolean b30 = ringBuffer25.isEmpty();
    int i31 = ringBuffer25.size();
    java.util.Spliterator spliterator32 = ringBuffer25.spliterator();
    exercise03.RingBuffer ringBuffer34 = new exercise03.RingBuffer(1);
    boolean b35 = ringBuffer34.isEmpty();
    java.util.Spliterator spliterator36 = ringBuffer34.spliterator();
    java.util.Spliterator spliterator37 = ringBuffer34.spliterator();
    java.util.Spliterator spliterator38 = ringBuffer34.spliterator();
    java.util.Iterator iterator39 = ringBuffer34.iterator();
    ringBuffer25.enqueue((java.lang.Object)iterator39);
    int i41 = ringBuffer25.size();
    boolean b42 = ringBuffer25.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer3.enqueue((java.lang.Object)ringBuffer25);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer9.spliterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    int i15 = ringBuffer9.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    boolean b17 = ringBuffer9.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    boolean b16 = ringBuffer10.isEmpty();
    exercise03.RingBuffer ringBuffer18 = new exercise03.RingBuffer(1);
    boolean b19 = ringBuffer18.isEmpty();
    java.util.Spliterator spliterator20 = ringBuffer18.spliterator();
    java.util.Spliterator spliterator21 = ringBuffer18.spliterator();
    ringBuffer10.enqueue((java.lang.Object)ringBuffer18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer18);
    int i24 = ringBuffer1.size();
    java.util.Spliterator spliterator25 = ringBuffer1.spliterator();
    java.util.Iterator iterator26 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    int i7 = ringBuffer1.size();
    int i8 = ringBuffer1.size();
    int i9 = ringBuffer1.size();
    int i10 = ringBuffer1.size();
    int i11 = ringBuffer1.size();
    java.util.function.Consumer consumer12 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    int i6 = ringBuffer1.size();
    int i7 = ringBuffer1.size();
    boolean b8 = ringBuffer1.isEmpty();
    boolean b9 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer10 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator11 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer13 = new exercise03.RingBuffer(1);
    boolean b14 = ringBuffer13.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer13.spliterator();
    java.util.Spliterator spliterator16 = ringBuffer13.spliterator();
    java.util.Iterator iterator17 = ringBuffer13.iterator();
    boolean b18 = ringBuffer13.isEmpty();
    int i19 = ringBuffer13.size();
    java.util.Spliterator spliterator20 = ringBuffer13.spliterator();
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(1);
    boolean b23 = ringBuffer22.isEmpty();
    java.util.Spliterator spliterator24 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator25 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator26 = ringBuffer22.spliterator();
    java.util.Iterator iterator27 = ringBuffer22.iterator();
    ringBuffer13.enqueue((java.lang.Object)iterator27);
    ringBuffer1.enqueue((java.lang.Object)iterator27);
    boolean b30 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer32 = new exercise03.RingBuffer(1);
    boolean b33 = ringBuffer32.isEmpty();
    java.util.Spliterator spliterator34 = ringBuffer32.spliterator();
    java.util.Spliterator spliterator35 = ringBuffer32.spliterator();
    java.util.Iterator iterator36 = ringBuffer32.iterator();
    java.util.Iterator iterator37 = ringBuffer32.iterator();
    boolean b38 = ringBuffer32.isEmpty();
    exercise03.RingBuffer ringBuffer40 = new exercise03.RingBuffer(1);
    boolean b41 = ringBuffer40.isEmpty();
    java.util.Spliterator spliterator42 = ringBuffer40.spliterator();
    java.util.Spliterator spliterator43 = ringBuffer40.spliterator();
    ringBuffer32.enqueue((java.lang.Object)ringBuffer40);
    exercise03.RingBuffer ringBuffer46 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator47 = ringBuffer46.iterator();
    ringBuffer40.enqueue((java.lang.Object)ringBuffer46);
    exercise03.RingBuffer ringBuffer50 = new exercise03.RingBuffer(1);
    boolean b51 = ringBuffer50.isEmpty();
    java.util.Spliterator spliterator52 = ringBuffer50.spliterator();
    java.util.Spliterator spliterator53 = ringBuffer50.spliterator();
    java.util.Iterator iterator54 = ringBuffer50.iterator();
    boolean b55 = ringBuffer50.isEmpty();
    int i56 = ringBuffer50.size();
    java.util.Iterator iterator57 = ringBuffer50.iterator();
    exercise03.RingBuffer ringBuffer59 = new exercise03.RingBuffer(1);
    boolean b60 = ringBuffer59.isEmpty();
    java.util.Spliterator spliterator61 = ringBuffer59.spliterator();
    java.util.Spliterator spliterator62 = ringBuffer59.spliterator();
    java.util.Iterator iterator63 = ringBuffer59.iterator();
    boolean b64 = ringBuffer59.isEmpty();
    int i65 = ringBuffer59.size();
    java.util.Spliterator spliterator66 = ringBuffer59.spliterator();
    ringBuffer50.enqueue((java.lang.Object)ringBuffer59);
    java.util.Spliterator spliterator68 = ringBuffer59.spliterator();
    boolean b69 = ringBuffer59.isEmpty();
    ringBuffer46.enqueue((java.lang.Object)b69);
    java.util.Spliterator spliterator71 = ringBuffer46.spliterator();
    exercise03.RingBuffer ringBuffer73 = new exercise03.RingBuffer(1);
    boolean b74 = ringBuffer73.isEmpty();
    java.util.Spliterator spliterator75 = ringBuffer73.spliterator();
    java.util.Spliterator spliterator76 = ringBuffer73.spliterator();
    java.util.Spliterator spliterator77 = ringBuffer73.spliterator();
    java.util.Iterator iterator78 = ringBuffer73.iterator();
    exercise03.RingBuffer ringBuffer80 = new exercise03.RingBuffer(1);
    ringBuffer80.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator83 = ringBuffer80.spliterator();
    java.lang.Object obj84 = ringBuffer80.dequeue();
    java.util.Spliterator spliterator85 = ringBuffer80.spliterator();
    ringBuffer73.enqueue((java.lang.Object)spliterator85);
    java.util.Spliterator spliterator87 = ringBuffer73.spliterator();
    ringBuffer46.enqueue((java.lang.Object)ringBuffer73);
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer46);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj84 + "' != '" + 'a'+ "'", obj84.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator87);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    boolean b15 = ringBuffer9.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    int i17 = ringBuffer9.size();
    java.util.Spliterator spliterator18 = ringBuffer9.spliterator();
    exercise03.RingBuffer ringBuffer20 = new exercise03.RingBuffer(1);
    boolean b21 = ringBuffer20.isEmpty();
    java.util.Spliterator spliterator22 = ringBuffer20.spliterator();
    java.util.Spliterator spliterator23 = ringBuffer20.spliterator();
    java.util.Spliterator spliterator24 = ringBuffer20.spliterator();
    java.util.Iterator iterator25 = ringBuffer20.iterator();
    int i26 = ringBuffer20.size();
    int i27 = ringBuffer20.size();
    java.util.Spliterator spliterator28 = ringBuffer20.spliterator();
    exercise03.RingBuffer ringBuffer30 = new exercise03.RingBuffer(1);
    boolean b31 = ringBuffer30.isEmpty();
    java.util.Spliterator spliterator32 = ringBuffer30.spliterator();
    java.util.Spliterator spliterator33 = ringBuffer30.spliterator();
    java.util.Iterator iterator34 = ringBuffer30.iterator();
    java.util.Iterator iterator35 = ringBuffer30.iterator();
    java.util.Spliterator spliterator36 = ringBuffer30.spliterator();
    java.util.Spliterator spliterator37 = ringBuffer30.spliterator();
    int i38 = ringBuffer30.size();
    boolean b39 = ringBuffer30.isEmpty();
    ringBuffer20.enqueue((java.lang.Object)b39);
    ringBuffer9.enqueue((java.lang.Object)ringBuffer20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    int i10 = ringBuffer1.size();
    int i11 = ringBuffer1.size();
    int i12 = ringBuffer1.size();
    boolean b13 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Spliterator spliterator19 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator20 = ringBuffer10.spliterator();
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(10);
    ringBuffer22.enqueue((java.lang.Object)'#');
    int i25 = ringBuffer22.size();
    java.util.Iterator iterator26 = ringBuffer22.iterator();
    java.util.Spliterator spliterator27 = ringBuffer22.spliterator();
    int i28 = ringBuffer22.size();
    exercise03.RingBuffer ringBuffer30 = new exercise03.RingBuffer(1);
    ringBuffer30.enqueue((java.lang.Object)'a');
    java.lang.Object obj33 = ringBuffer30.dequeue();
    java.util.Spliterator spliterator34 = ringBuffer30.spliterator();
    ringBuffer22.enqueue((java.lang.Object)ringBuffer30);
    ringBuffer10.enqueue((java.lang.Object)ringBuffer30);
    int i37 = ringBuffer10.size();
    java.util.function.Consumer consumer38 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer10.forEach(consumer38);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 'a'+ "'", obj33.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Iterator iterator9 = ringBuffer1.iterator();
    int i10 = ringBuffer1.size();
    java.util.Iterator iterator11 = ringBuffer1.iterator();
    java.util.Iterator iterator12 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer14 = new exercise03.RingBuffer(10);
    ringBuffer14.enqueue((java.lang.Object)'#');
    int i17 = ringBuffer14.size();
    java.util.Iterator iterator18 = ringBuffer14.iterator();
    java.util.Spliterator spliterator19 = ringBuffer14.spliterator();
    java.util.Iterator iterator20 = ringBuffer14.iterator();
    java.util.Iterator iterator21 = ringBuffer14.iterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)iterator21);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator21);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator16 = ringBuffer15.iterator();
    ringBuffer9.enqueue((java.lang.Object)ringBuffer15);
    boolean b18 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator19 = ringBuffer9.spliterator();
    boolean b20 = ringBuffer9.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    boolean b9 = ringBuffer8.isEmpty();
    java.util.Spliterator spliterator10 = ringBuffer8.spliterator();
    java.util.Spliterator spliterator11 = ringBuffer8.spliterator();
    java.util.Iterator iterator12 = ringBuffer8.iterator();
    boolean b13 = ringBuffer8.isEmpty();
    int i14 = ringBuffer8.size();
    java.util.Spliterator spliterator15 = ringBuffer8.spliterator();
    java.util.Spliterator spliterator16 = ringBuffer8.spliterator();
    java.util.Iterator iterator17 = ringBuffer8.iterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    java.util.Spliterator spliterator19 = ringBuffer8.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(100);
    java.util.Spliterator spliterator2 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj10 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.lang.Object obj4 = ringBuffer1.dequeue();
    ringBuffer1.enqueue((java.lang.Object)(short)1);
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 'a'+ "'", obj4.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Iterator iterator4 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer6 = new exercise03.RingBuffer(1);
    boolean b7 = ringBuffer6.isEmpty();
    java.util.Spliterator spliterator8 = ringBuffer6.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer6.spliterator();
    java.util.Iterator iterator10 = ringBuffer6.iterator();
    boolean b11 = ringBuffer6.isEmpty();
    int i12 = ringBuffer6.size();
    java.util.Spliterator spliterator13 = ringBuffer6.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator13);
    int i15 = ringBuffer1.size();
    java.util.function.Consumer consumer16 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer9.spliterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    int i15 = ringBuffer9.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    java.util.Iterator iterator17 = ringBuffer9.iterator();
    int i18 = ringBuffer9.size();
    java.util.Iterator iterator19 = ringBuffer9.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    boolean b5 = ringBuffer1.isEmpty();
    int i6 = ringBuffer1.size();
    boolean b7 = ringBuffer1.isEmpty();
    boolean b8 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    java.util.Iterator iterator11 = ringBuffer10.iterator();
    java.util.Iterator iterator12 = ringBuffer10.iterator();
    java.lang.Object obj13 = null;
    ringBuffer10.enqueue(obj13);
    ringBuffer1.enqueue(obj13);
    exercise03.RingBuffer ringBuffer17 = new exercise03.RingBuffer(1);
    java.util.Spliterator spliterator18 = ringBuffer17.spliterator();
    int i19 = ringBuffer17.size();
    ringBuffer1.enqueue((java.lang.Object)i19);
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(1);
    ringBuffer22.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator25 = ringBuffer22.spliterator();
    int i26 = ringBuffer22.size();
    java.util.Spliterator spliterator27 = ringBuffer22.spliterator();
    java.util.Iterator iterator28 = ringBuffer22.iterator();
    java.util.Iterator iterator29 = ringBuffer22.iterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator29);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    boolean b11 = ringBuffer1.isEmpty();
    int i12 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer14 = new exercise03.RingBuffer(1);
    boolean b15 = ringBuffer14.isEmpty();
    java.util.Spliterator spliterator16 = ringBuffer14.spliterator();
    java.util.Spliterator spliterator17 = ringBuffer14.spliterator();
    java.util.Iterator iterator18 = ringBuffer14.iterator();
    boolean b19 = ringBuffer14.isEmpty();
    int i20 = ringBuffer14.size();
    java.util.Spliterator spliterator21 = ringBuffer14.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer14.spliterator();
    java.util.Iterator iterator23 = ringBuffer14.iterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer14);
    java.util.function.Consumer consumer25 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer14.forEach(consumer25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test339"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator16 = ringBuffer15.iterator();
    ringBuffer9.enqueue((java.lang.Object)ringBuffer15);
    int i18 = ringBuffer9.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test340"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator11 = ringBuffer1.spliterator();
    java.util.Iterator iterator12 = ringBuffer1.iterator();
    java.util.Iterator iterator13 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(1);
    boolean b16 = ringBuffer15.isEmpty();
    int i17 = ringBuffer15.size();
    ringBuffer1.enqueue((java.lang.Object)i17);
    int i19 = ringBuffer1.size();
    boolean b20 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test341"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)false);
    exercise03.RingBuffer ringBuffer5 = new exercise03.RingBuffer(1);
    java.util.Iterator iterator6 = ringBuffer5.iterator();
    java.util.Iterator iterator7 = ringBuffer5.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator7);
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(10);
    ringBuffer10.enqueue((java.lang.Object)'#');
    int i13 = ringBuffer10.size();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    int i15 = ringBuffer10.size();
    exercise03.RingBuffer ringBuffer17 = new exercise03.RingBuffer(1);
    ringBuffer17.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator20 = ringBuffer17.spliterator();
    java.lang.Object obj21 = ringBuffer17.dequeue();
    java.util.Spliterator spliterator22 = ringBuffer17.spliterator();
    boolean b23 = ringBuffer17.isEmpty();
    int i24 = ringBuffer17.size();
    ringBuffer10.enqueue((java.lang.Object)i24);
    ringBuffer1.enqueue((java.lang.Object)i24);
    java.util.function.Consumer consumer27 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 'a'+ "'", obj21.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test342"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    int i17 = ringBuffer1.size();
    java.util.Iterator iterator18 = ringBuffer1.iterator();
    java.util.Iterator iterator19 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test343"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer7);
    int i11 = ringBuffer7.size();
    boolean b12 = ringBuffer7.isEmpty();
    int i13 = ringBuffer7.size();
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer17 = new exercise03.RingBuffer(1);
    boolean b18 = ringBuffer17.isEmpty();
    java.util.Spliterator spliterator19 = ringBuffer17.spliterator();
    java.util.Spliterator spliterator20 = ringBuffer17.spliterator();
    java.util.Iterator iterator21 = ringBuffer17.iterator();
    boolean b22 = ringBuffer17.isEmpty();
    java.util.Iterator iterator23 = ringBuffer17.iterator();
    exercise03.RingBuffer ringBuffer25 = new exercise03.RingBuffer(1);
    boolean b26 = ringBuffer25.isEmpty();
    java.util.Spliterator spliterator27 = ringBuffer25.spliterator();
    java.util.Spliterator spliterator28 = ringBuffer25.spliterator();
    java.util.Iterator iterator29 = ringBuffer25.iterator();
    boolean b30 = ringBuffer25.isEmpty();
    int i31 = ringBuffer25.size();
    java.util.Spliterator spliterator32 = ringBuffer25.spliterator();
    ringBuffer17.enqueue((java.lang.Object)spliterator32);
    ringBuffer15.enqueue((java.lang.Object)ringBuffer17);
    int i35 = ringBuffer17.size();
    boolean b36 = ringBuffer17.isEmpty();
    ringBuffer7.enqueue((java.lang.Object)b36);
    boolean b38 = ringBuffer7.isEmpty();
    exercise03.RingBuffer ringBuffer40 = new exercise03.RingBuffer(1);
    boolean b41 = ringBuffer40.isEmpty();
    java.util.Spliterator spliterator42 = ringBuffer40.spliterator();
    java.util.Spliterator spliterator43 = ringBuffer40.spliterator();
    java.util.Iterator iterator44 = ringBuffer40.iterator();
    boolean b45 = ringBuffer40.isEmpty();
    int i46 = ringBuffer40.size();
    java.util.Iterator iterator47 = ringBuffer40.iterator();
    exercise03.RingBuffer ringBuffer49 = new exercise03.RingBuffer(1);
    boolean b50 = ringBuffer49.isEmpty();
    java.util.Spliterator spliterator51 = ringBuffer49.spliterator();
    java.util.Spliterator spliterator52 = ringBuffer49.spliterator();
    java.util.Iterator iterator53 = ringBuffer49.iterator();
    boolean b54 = ringBuffer49.isEmpty();
    int i55 = ringBuffer49.size();
    java.util.Spliterator spliterator56 = ringBuffer49.spliterator();
    ringBuffer40.enqueue((java.lang.Object)ringBuffer49);
    java.util.Iterator iterator58 = ringBuffer49.iterator();
    boolean b59 = ringBuffer49.isEmpty();
    boolean b60 = ringBuffer49.isEmpty();
    exercise03.RingBuffer ringBuffer62 = new exercise03.RingBuffer(1);
    boolean b63 = ringBuffer62.isEmpty();
    java.util.Spliterator spliterator64 = ringBuffer62.spliterator();
    java.util.Spliterator spliterator65 = ringBuffer62.spliterator();
    java.util.Iterator iterator66 = ringBuffer62.iterator();
    boolean b67 = ringBuffer62.isEmpty();
    exercise03.RingBuffer ringBuffer69 = new exercise03.RingBuffer(1);
    ringBuffer62.enqueue((java.lang.Object)ringBuffer69);
    exercise03.RingBuffer ringBuffer72 = new exercise03.RingBuffer(1);
    boolean b73 = ringBuffer72.isEmpty();
    java.util.Spliterator spliterator74 = ringBuffer72.spliterator();
    java.util.Spliterator spliterator75 = ringBuffer72.spliterator();
    java.util.Spliterator spliterator76 = ringBuffer72.spliterator();
    java.util.Iterator iterator77 = ringBuffer72.iterator();
    ringBuffer69.enqueue((java.lang.Object)ringBuffer72);
    ringBuffer49.enqueue((java.lang.Object)ringBuffer69);
    java.util.Iterator iterator80 = ringBuffer69.iterator();
    java.lang.Object obj81 = ringBuffer69.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer7.enqueue(obj81);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj81);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test344"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    int i10 = ringBuffer1.size();
    int i11 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer13 = new exercise03.RingBuffer(1);
    boolean b14 = ringBuffer13.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer13.spliterator();
    java.util.Spliterator spliterator16 = ringBuffer13.spliterator();
    java.util.Iterator iterator17 = ringBuffer13.iterator();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    ringBuffer13.enqueue((java.lang.Object)spliterator22);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer13);
    java.util.Spliterator spliterator25 = ringBuffer13.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test345"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    boolean b4 = ringBuffer1.isEmpty();
    int i5 = ringBuffer1.size();
    java.lang.Object obj6 = ringBuffer1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 'a'+ "'", obj6.equals('a'));

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test346"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Iterator iterator19 = ringBuffer1.iterator();
    java.lang.Object obj20 = ringBuffer1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj20);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test347"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    boolean b17 = ringBuffer1.isEmpty();
    boolean b18 = ringBuffer1.isEmpty();
    java.lang.Object obj19 = ringBuffer1.dequeue();
    exercise03.RingBuffer ringBuffer21 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator22 = ringBuffer21.iterator();
    java.util.Iterator iterator23 = ringBuffer21.iterator();
    int i24 = ringBuffer21.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer21);
    java.util.function.Consumer consumer26 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer21.forEach(consumer26);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test348"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    int i6 = ringBuffer1.size();
    java.lang.Object obj7 = ringBuffer1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 'a'+ "'", obj7.equals('a'));

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test349"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    int i7 = ringBuffer1.size();
    java.lang.Object obj8 = ringBuffer1.dequeue();
    int i9 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer11.spliterator();
    java.util.Iterator iterator16 = ringBuffer11.iterator();
    int i17 = ringBuffer11.size();
    boolean b18 = ringBuffer11.isEmpty();
    boolean b19 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator20 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator21 = ringBuffer11.spliterator();
    java.util.Iterator iterator22 = ringBuffer11.iterator();
    exercise03.RingBuffer ringBuffer24 = new exercise03.RingBuffer(0);
    java.util.Spliterator spliterator25 = ringBuffer24.spliterator();
    ringBuffer11.enqueue((java.lang.Object)ringBuffer24);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer11);
    java.util.Spliterator spliterator28 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + '#'+ "'", obj8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test350"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test351"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    java.util.Iterator iterator9 = ringBuffer1.iterator();
    java.util.function.Consumer consumer10 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test352"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    boolean b5 = ringBuffer1.isEmpty();
    int i6 = ringBuffer1.size();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(10);
    ringBuffer9.enqueue((java.lang.Object)false);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer14 = new exercise03.RingBuffer(1);
    boolean b15 = ringBuffer14.isEmpty();
    java.util.Spliterator spliterator16 = ringBuffer14.spliterator();
    java.util.Spliterator spliterator17 = ringBuffer14.spliterator();
    java.util.Iterator iterator18 = ringBuffer14.iterator();
    java.util.Iterator iterator19 = ringBuffer14.iterator();
    boolean b20 = ringBuffer14.isEmpty();
    int i21 = ringBuffer14.size();
    boolean b22 = ringBuffer14.isEmpty();
    ringBuffer14.enqueue((java.lang.Object)'#');
    ringBuffer9.enqueue((java.lang.Object)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test353"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    java.lang.Object obj9 = ringBuffer1.dequeue();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + '#'+ "'", obj9.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test354"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    boolean b8 = ringBuffer1.isEmpty();
    int i9 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    boolean b16 = ringBuffer11.isEmpty();
    java.util.Iterator iterator17 = ringBuffer11.iterator();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator23 = ringBuffer19.spliterator();
    java.util.Iterator iterator24 = ringBuffer19.iterator();
    int i25 = ringBuffer19.size();
    ringBuffer11.enqueue((java.lang.Object)ringBuffer19);
    java.util.Iterator iterator27 = ringBuffer19.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator27);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test355"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test356"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.function.Consumer consumer8 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test357"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)false);
    exercise03.RingBuffer ringBuffer5 = new exercise03.RingBuffer(1);
    java.util.Iterator iterator6 = ringBuffer5.iterator();
    java.util.Iterator iterator7 = ringBuffer5.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator7);
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test358"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    boolean b14 = ringBuffer9.isEmpty();
    int i15 = ringBuffer9.size();
    java.util.Spliterator spliterator16 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator16);
    int i18 = ringBuffer1.size();
    java.lang.Object obj19 = ringBuffer1.dequeue();
    boolean b20 = ringBuffer1.isEmpty();
    boolean b21 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator22 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test359"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Spliterator spliterator19 = ringBuffer10.spliterator();
    java.util.Iterator iterator20 = ringBuffer10.iterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj21 = ringBuffer10.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test360"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    boolean b10 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer12 = new exercise03.RingBuffer(1);
    ringBuffer12.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator15 = ringBuffer12.spliterator();
    int i16 = ringBuffer12.size();
    java.util.Spliterator spliterator17 = ringBuffer12.spliterator();
    java.util.Iterator iterator18 = ringBuffer12.iterator();
    java.util.Spliterator spliterator19 = ringBuffer12.spliterator();
    java.lang.Object obj20 = ringBuffer12.dequeue();
    int i21 = ringBuffer12.size();
    ringBuffer1.enqueue((java.lang.Object)i21);
    java.util.Spliterator spliterator23 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator24 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator25 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 'a'+ "'", obj20.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test361"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    java.util.Iterator iterator9 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(10);
    ringBuffer11.enqueue((java.lang.Object)'#');
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.lang.Object obj15 = ringBuffer11.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer11);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + '#'+ "'", obj15.equals('#'));

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test362"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)false);
    java.lang.Object obj4 = ringBuffer1.dequeue();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + false+ "'", obj4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test363"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.lang.Object obj4 = ringBuffer1.dequeue();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.lang.Object obj6 = null;
    ringBuffer1.enqueue(obj6);
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.lang.Object obj9 = ringBuffer1.dequeue();
    java.lang.Object obj10 = null;
    ringBuffer1.enqueue(obj10);
    java.util.function.Consumer consumer12 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 'a'+ "'", obj4.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj9);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test364"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    java.util.Spliterator spliterator2 = ringBuffer1.spliterator();
    int i3 = ringBuffer1.size();
    java.util.function.Consumer consumer4 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test365"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    java.util.Spliterator spliterator15 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator16 = ringBuffer9.spliterator();
    int i17 = ringBuffer9.size();
    int i18 = ringBuffer9.size();
    ringBuffer1.enqueue((java.lang.Object)i18);
    java.util.Spliterator spliterator20 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(1);
    boolean b23 = ringBuffer22.isEmpty();
    java.util.Spliterator spliterator24 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator25 = ringBuffer22.spliterator();
    java.util.Iterator iterator26 = ringBuffer22.iterator();
    boolean b27 = ringBuffer22.isEmpty();
    int i28 = ringBuffer22.size();
    java.util.Iterator iterator29 = ringBuffer22.iterator();
    exercise03.RingBuffer ringBuffer31 = new exercise03.RingBuffer(1);
    boolean b32 = ringBuffer31.isEmpty();
    java.util.Spliterator spliterator33 = ringBuffer31.spliterator();
    java.util.Spliterator spliterator34 = ringBuffer31.spliterator();
    java.util.Iterator iterator35 = ringBuffer31.iterator();
    boolean b36 = ringBuffer31.isEmpty();
    int i37 = ringBuffer31.size();
    java.util.Spliterator spliterator38 = ringBuffer31.spliterator();
    ringBuffer22.enqueue((java.lang.Object)ringBuffer31);
    java.util.Spliterator spliterator40 = ringBuffer31.spliterator();
    boolean b41 = ringBuffer31.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)b41);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test366"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    boolean b4 = ringBuffer1.isEmpty();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.lang.Object obj7 = ringBuffer1.dequeue();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    boolean b14 = ringBuffer9.isEmpty();
    java.util.Iterator iterator15 = ringBuffer9.iterator();
    exercise03.RingBuffer ringBuffer17 = new exercise03.RingBuffer(1);
    boolean b18 = ringBuffer17.isEmpty();
    java.util.Spliterator spliterator19 = ringBuffer17.spliterator();
    java.util.Spliterator spliterator20 = ringBuffer17.spliterator();
    java.util.Iterator iterator21 = ringBuffer17.iterator();
    java.util.Iterator iterator22 = ringBuffer17.iterator();
    boolean b23 = ringBuffer17.isEmpty();
    ringBuffer9.enqueue((java.lang.Object)ringBuffer17);
    java.util.Spliterator spliterator25 = ringBuffer17.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 'a'+ "'", obj7.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test367"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    int i7 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    ringBuffer9.enqueue((java.lang.Object)'a');
    java.lang.Object obj12 = ringBuffer9.dequeue();
    java.util.Spliterator spliterator13 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    java.util.Spliterator spliterator15 = ringBuffer1.spliterator();
    int i16 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 'a'+ "'", obj12.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 2);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test368"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    int i8 = ringBuffer1.size();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    boolean b10 = ringBuffer1.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj11 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test369"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    boolean b10 = ringBuffer1.isEmpty();
    boolean b11 = ringBuffer1.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj12 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test370"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    java.lang.Object obj17 = ringBuffer1.dequeue();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator23 = ringBuffer19.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator23);
    java.lang.Object obj25 = ringBuffer1.dequeue();
    ringBuffer1.enqueue((java.lang.Object)(byte)100);
    exercise03.RingBuffer ringBuffer29 = new exercise03.RingBuffer(1);
    boolean b30 = ringBuffer29.isEmpty();
    java.util.Spliterator spliterator31 = ringBuffer29.spliterator();
    java.util.Spliterator spliterator32 = ringBuffer29.spliterator();
    java.util.Iterator iterator33 = ringBuffer29.iterator();
    boolean b34 = ringBuffer29.isEmpty();
    int i35 = ringBuffer29.size();
    java.util.Spliterator spliterator36 = ringBuffer29.spliterator();
    java.util.Spliterator spliterator37 = ringBuffer29.spliterator();
    java.util.Spliterator spliterator38 = ringBuffer29.spliterator();
    java.util.Spliterator spliterator39 = ringBuffer29.spliterator();
    java.util.Iterator iterator40 = ringBuffer29.iterator();
    java.util.Iterator iterator41 = ringBuffer29.iterator();
    exercise03.RingBuffer ringBuffer43 = new exercise03.RingBuffer(1);
    boolean b44 = ringBuffer43.isEmpty();
    int i45 = ringBuffer43.size();
    ringBuffer29.enqueue((java.lang.Object)i45);
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer29);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test371"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    boolean b14 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer1.spliterator();
    boolean b16 = ringBuffer1.isEmpty();
    java.lang.Object obj17 = ringBuffer1.dequeue();
    java.util.function.Consumer consumer18 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test372"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Spliterator spliterator19 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator20 = ringBuffer10.spliterator();
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(10);
    ringBuffer22.enqueue((java.lang.Object)'#');
    int i25 = ringBuffer22.size();
    java.util.Iterator iterator26 = ringBuffer22.iterator();
    java.util.Spliterator spliterator27 = ringBuffer22.spliterator();
    int i28 = ringBuffer22.size();
    exercise03.RingBuffer ringBuffer30 = new exercise03.RingBuffer(1);
    ringBuffer30.enqueue((java.lang.Object)'a');
    java.lang.Object obj33 = ringBuffer30.dequeue();
    java.util.Spliterator spliterator34 = ringBuffer30.spliterator();
    ringBuffer22.enqueue((java.lang.Object)ringBuffer30);
    ringBuffer10.enqueue((java.lang.Object)ringBuffer30);
    int i37 = ringBuffer30.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 'a'+ "'", obj33.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test373"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer8 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test374"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    boolean b16 = ringBuffer11.isEmpty();
    int i17 = ringBuffer11.size();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    ringBuffer3.enqueue((java.lang.Object)spliterator18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer3);
    int i21 = ringBuffer3.size();
    java.util.Iterator iterator22 = ringBuffer3.iterator();
    java.lang.Object obj23 = ringBuffer3.dequeue();
    int i24 = ringBuffer3.size();
    java.util.function.Consumer consumer25 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer3.forEach(consumer25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test375"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(0);
    java.util.Spliterator spliterator2 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test376"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator2 = ringBuffer1.iterator();
    java.util.Iterator iterator3 = ringBuffer1.iterator();
    int i4 = ringBuffer1.size();
    int i5 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test377"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    boolean b5 = ringBuffer1.isEmpty();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    int i8 = ringBuffer1.size();
    java.util.function.Consumer consumer9 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test378"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer8.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator11 = ringBuffer8.spliterator();
    java.lang.Object obj12 = ringBuffer8.dequeue();
    java.util.Spliterator spliterator13 = ringBuffer8.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator13);
    java.lang.Object obj15 = ringBuffer1.dequeue();
    exercise03.RingBuffer ringBuffer17 = new exercise03.RingBuffer(1);
    boolean b18 = ringBuffer17.isEmpty();
    java.util.Spliterator spliterator19 = ringBuffer17.spliterator();
    java.util.Spliterator spliterator20 = ringBuffer17.spliterator();
    java.util.Iterator iterator21 = ringBuffer17.iterator();
    boolean b22 = ringBuffer17.isEmpty();
    int i23 = ringBuffer17.size();
    java.util.Iterator iterator24 = ringBuffer17.iterator();
    exercise03.RingBuffer ringBuffer26 = new exercise03.RingBuffer(1);
    boolean b27 = ringBuffer26.isEmpty();
    java.util.Spliterator spliterator28 = ringBuffer26.spliterator();
    java.util.Spliterator spliterator29 = ringBuffer26.spliterator();
    java.util.Iterator iterator30 = ringBuffer26.iterator();
    boolean b31 = ringBuffer26.isEmpty();
    int i32 = ringBuffer26.size();
    java.util.Spliterator spliterator33 = ringBuffer26.spliterator();
    ringBuffer17.enqueue((java.lang.Object)ringBuffer26);
    java.util.Iterator iterator35 = ringBuffer26.iterator();
    boolean b36 = ringBuffer26.isEmpty();
    boolean b37 = ringBuffer26.isEmpty();
    exercise03.RingBuffer ringBuffer39 = new exercise03.RingBuffer(1);
    boolean b40 = ringBuffer39.isEmpty();
    java.util.Spliterator spliterator41 = ringBuffer39.spliterator();
    java.util.Spliterator spliterator42 = ringBuffer39.spliterator();
    java.util.Iterator iterator43 = ringBuffer39.iterator();
    boolean b44 = ringBuffer39.isEmpty();
    exercise03.RingBuffer ringBuffer46 = new exercise03.RingBuffer(1);
    ringBuffer39.enqueue((java.lang.Object)ringBuffer46);
    exercise03.RingBuffer ringBuffer49 = new exercise03.RingBuffer(1);
    boolean b50 = ringBuffer49.isEmpty();
    java.util.Spliterator spliterator51 = ringBuffer49.spliterator();
    java.util.Spliterator spliterator52 = ringBuffer49.spliterator();
    java.util.Spliterator spliterator53 = ringBuffer49.spliterator();
    java.util.Iterator iterator54 = ringBuffer49.iterator();
    ringBuffer46.enqueue((java.lang.Object)ringBuffer49);
    ringBuffer26.enqueue((java.lang.Object)ringBuffer46);
    java.util.Iterator iterator57 = ringBuffer46.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator57);
    java.util.Spliterator spliterator59 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 'a'+ "'", obj12.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator59);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test379"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    boolean b17 = ringBuffer1.isEmpty();
    boolean b18 = ringBuffer1.isEmpty();
    int i19 = ringBuffer1.size();
    java.util.Iterator iterator20 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test380"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(100);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator9);
    int i11 = ringBuffer1.size();
    boolean b12 = ringBuffer1.isEmpty();
    boolean b13 = ringBuffer1.isEmpty();
    boolean b14 = ringBuffer1.isEmpty();
    boolean b15 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test381"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    boolean b9 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    ringBuffer11.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    int i15 = ringBuffer11.size();
    java.util.Spliterator spliterator16 = ringBuffer11.spliterator();
    java.util.Iterator iterator17 = ringBuffer11.iterator();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    java.util.Iterator iterator19 = ringBuffer11.iterator();
    int i20 = ringBuffer11.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer11);
    boolean b22 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test382"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    boolean b15 = ringBuffer9.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    boolean b17 = ringBuffer1.isEmpty();
    java.lang.Object obj18 = ringBuffer1.dequeue();
    boolean b19 = ringBuffer1.isEmpty();
    boolean b20 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(1);
    boolean b23 = ringBuffer22.isEmpty();
    java.util.Spliterator spliterator24 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator25 = ringBuffer22.spliterator();
    java.util.Iterator iterator26 = ringBuffer22.iterator();
    java.util.Iterator iterator27 = ringBuffer22.iterator();
    java.util.Spliterator spliterator28 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator29 = ringBuffer22.spliterator();
    int i30 = ringBuffer22.size();
    boolean b31 = ringBuffer22.isEmpty();
    int i32 = ringBuffer22.size();
    exercise03.RingBuffer ringBuffer34 = new exercise03.RingBuffer(1);
    ringBuffer34.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator37 = ringBuffer34.spliterator();
    java.lang.Object obj38 = ringBuffer34.dequeue();
    java.util.Spliterator spliterator39 = ringBuffer34.spliterator();
    boolean b40 = ringBuffer34.isEmpty();
    int i41 = ringBuffer34.size();
    ringBuffer22.enqueue((java.lang.Object)ringBuffer34);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 'a'+ "'", obj38.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test383"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator11 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test384"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator16 = ringBuffer15.iterator();
    ringBuffer9.enqueue((java.lang.Object)ringBuffer15);
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    java.util.Iterator iterator23 = ringBuffer19.iterator();
    boolean b24 = ringBuffer19.isEmpty();
    int i25 = ringBuffer19.size();
    java.util.Iterator iterator26 = ringBuffer19.iterator();
    exercise03.RingBuffer ringBuffer28 = new exercise03.RingBuffer(1);
    boolean b29 = ringBuffer28.isEmpty();
    java.util.Spliterator spliterator30 = ringBuffer28.spliterator();
    java.util.Spliterator spliterator31 = ringBuffer28.spliterator();
    java.util.Iterator iterator32 = ringBuffer28.iterator();
    boolean b33 = ringBuffer28.isEmpty();
    int i34 = ringBuffer28.size();
    java.util.Spliterator spliterator35 = ringBuffer28.spliterator();
    ringBuffer19.enqueue((java.lang.Object)ringBuffer28);
    java.util.Spliterator spliterator37 = ringBuffer28.spliterator();
    boolean b38 = ringBuffer28.isEmpty();
    ringBuffer15.enqueue((java.lang.Object)b38);
    java.util.Spliterator spliterator40 = ringBuffer15.spliterator();
    exercise03.RingBuffer ringBuffer42 = new exercise03.RingBuffer(1);
    boolean b43 = ringBuffer42.isEmpty();
    java.util.Spliterator spliterator44 = ringBuffer42.spliterator();
    java.util.Spliterator spliterator45 = ringBuffer42.spliterator();
    java.util.Spliterator spliterator46 = ringBuffer42.spliterator();
    java.util.Iterator iterator47 = ringBuffer42.iterator();
    exercise03.RingBuffer ringBuffer49 = new exercise03.RingBuffer(1);
    ringBuffer49.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator52 = ringBuffer49.spliterator();
    java.lang.Object obj53 = ringBuffer49.dequeue();
    java.util.Spliterator spliterator54 = ringBuffer49.spliterator();
    ringBuffer42.enqueue((java.lang.Object)spliterator54);
    java.util.Spliterator spliterator56 = ringBuffer42.spliterator();
    ringBuffer15.enqueue((java.lang.Object)ringBuffer42);
    int i58 = ringBuffer42.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj53 + "' != '" + 'a'+ "'", obj53.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test385"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Spliterator spliterator19 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator20 = ringBuffer10.spliterator();
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(1);
    ringBuffer22.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator25 = ringBuffer22.spliterator();
    int i26 = ringBuffer22.size();
    boolean b27 = ringBuffer22.isEmpty();
    java.util.Spliterator spliterator28 = ringBuffer22.spliterator();
    ringBuffer10.enqueue((java.lang.Object)ringBuffer22);
    java.lang.Object obj30 = ringBuffer22.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 'a'+ "'", obj30.equals('a'));

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test386"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    boolean b5 = ringBuffer1.isEmpty();
    int i6 = ringBuffer1.size();
    boolean b7 = ringBuffer1.isEmpty();
    boolean b8 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    java.util.Iterator iterator11 = ringBuffer10.iterator();
    java.util.Iterator iterator12 = ringBuffer10.iterator();
    java.lang.Object obj13 = null;
    ringBuffer10.enqueue(obj13);
    ringBuffer1.enqueue(obj13);
    java.lang.Object obj16 = ringBuffer1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + '#'+ "'", obj16.equals('#'));

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test387"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    boolean b6 = ringBuffer1.isEmpty();
    boolean b7 = ringBuffer1.isEmpty();
    boolean b8 = ringBuffer1.isEmpty();
    boolean b9 = ringBuffer1.isEmpty();
    int i10 = ringBuffer1.size();
    int i11 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test388"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator2 = ringBuffer1.iterator();
    java.util.Iterator iterator3 = ringBuffer1.iterator();
    boolean b4 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test389"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.function.Consumer consumer8 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test390"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer8.enqueue((java.lang.Object)'a');
    java.util.Iterator iterator11 = ringBuffer8.iterator();
    java.lang.Object obj12 = ringBuffer8.dequeue();
    boolean b13 = ringBuffer8.isEmpty();
    int i14 = ringBuffer8.size();
    java.util.Iterator iterator15 = ringBuffer8.iterator();
    int i16 = ringBuffer8.size();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 'a'+ "'", obj12.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test391"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test392"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    int i7 = ringBuffer1.size();
    int i8 = ringBuffer1.size();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    int i10 = ringBuffer1.size();
    java.util.Spliterator spliterator11 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test393"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    java.lang.Object obj4 = ringBuffer1.dequeue();
    exercise03.RingBuffer ringBuffer6 = new exercise03.RingBuffer(1);
    ringBuffer6.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator9 = ringBuffer6.spliterator();
    int i10 = ringBuffer6.size();
    java.util.Spliterator spliterator11 = ringBuffer6.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator11);
    java.lang.Object obj13 = ringBuffer1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + '#'+ "'", obj4.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test394"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.lang.Object obj5 = ringBuffer1.dequeue();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer7.spliterator();
    java.util.Iterator iterator11 = ringBuffer7.iterator();
    java.util.Iterator iterator12 = ringBuffer7.iterator();
    boolean b13 = ringBuffer7.isEmpty();
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(1);
    boolean b16 = ringBuffer15.isEmpty();
    java.util.Spliterator spliterator17 = ringBuffer15.spliterator();
    java.util.Spliterator spliterator18 = ringBuffer15.spliterator();
    ringBuffer7.enqueue((java.lang.Object)ringBuffer15);
    exercise03.RingBuffer ringBuffer21 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator22 = ringBuffer21.iterator();
    ringBuffer15.enqueue((java.lang.Object)ringBuffer21);
    java.util.Iterator iterator24 = ringBuffer21.iterator();
    boolean b25 = ringBuffer21.isEmpty();
    java.util.Spliterator spliterator26 = ringBuffer21.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer21);
    int i28 = ringBuffer21.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 'a'+ "'", obj5.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test395"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.lang.Object obj6 = ringBuffer1.dequeue();
    boolean b7 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + '#'+ "'", obj6.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test396"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    boolean b16 = ringBuffer10.isEmpty();
    exercise03.RingBuffer ringBuffer18 = new exercise03.RingBuffer(1);
    boolean b19 = ringBuffer18.isEmpty();
    java.util.Spliterator spliterator20 = ringBuffer18.spliterator();
    java.util.Spliterator spliterator21 = ringBuffer18.spliterator();
    ringBuffer10.enqueue((java.lang.Object)ringBuffer18);
    java.util.Iterator iterator23 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.lang.Object obj25 = ringBuffer1.dequeue();
    int i26 = ringBuffer1.size();
    java.util.function.Consumer consumer27 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test397"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    boolean b15 = ringBuffer9.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    boolean b17 = ringBuffer1.isEmpty();
    java.lang.Object obj18 = ringBuffer1.dequeue();
    java.util.function.Consumer consumer19 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test398"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(10);
    ringBuffer7.enqueue((java.lang.Object)'#');
    int i10 = ringBuffer7.size();
    java.util.Iterator iterator11 = ringBuffer7.iterator();
    exercise03.RingBuffer ringBuffer13 = new exercise03.RingBuffer(1);
    boolean b14 = ringBuffer13.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer13.spliterator();
    ringBuffer7.enqueue((java.lang.Object)ringBuffer13);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer13);
    java.lang.Object obj18 = ringBuffer1.dequeue();
    java.util.Iterator iterator19 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test399"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.lang.Object obj11 = ringBuffer1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj11);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test400"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer11.spliterator();
    java.util.Iterator iterator16 = ringBuffer11.iterator();
    ringBuffer8.enqueue((java.lang.Object)ringBuffer11);
    boolean b18 = ringBuffer8.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test401"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    int i9 = ringBuffer1.size();
    boolean b10 = ringBuffer1.isEmpty();
    int i11 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer13 = new exercise03.RingBuffer(1);
    ringBuffer13.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator16 = ringBuffer13.spliterator();
    java.lang.Object obj17 = ringBuffer13.dequeue();
    java.util.Spliterator spliterator18 = ringBuffer13.spliterator();
    boolean b19 = ringBuffer13.isEmpty();
    int i20 = ringBuffer13.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer13);
    exercise03.RingBuffer ringBuffer23 = new exercise03.RingBuffer(1);
    boolean b24 = ringBuffer23.isEmpty();
    java.util.Spliterator spliterator25 = ringBuffer23.spliterator();
    java.util.Spliterator spliterator26 = ringBuffer23.spliterator();
    java.util.Iterator iterator27 = ringBuffer23.iterator();
    boolean b28 = ringBuffer23.isEmpty();
    int i29 = ringBuffer23.size();
    java.util.Iterator iterator30 = ringBuffer23.iterator();
    exercise03.RingBuffer ringBuffer32 = new exercise03.RingBuffer(1);
    boolean b33 = ringBuffer32.isEmpty();
    java.util.Spliterator spliterator34 = ringBuffer32.spliterator();
    java.util.Spliterator spliterator35 = ringBuffer32.spliterator();
    java.util.Iterator iterator36 = ringBuffer32.iterator();
    boolean b37 = ringBuffer32.isEmpty();
    int i38 = ringBuffer32.size();
    java.util.Spliterator spliterator39 = ringBuffer32.spliterator();
    ringBuffer23.enqueue((java.lang.Object)ringBuffer32);
    exercise03.RingBuffer ringBuffer42 = new exercise03.RingBuffer(1);
    boolean b43 = ringBuffer42.isEmpty();
    java.util.Spliterator spliterator44 = ringBuffer42.spliterator();
    java.util.Spliterator spliterator45 = ringBuffer42.spliterator();
    java.util.Iterator iterator46 = ringBuffer42.iterator();
    boolean b47 = ringBuffer42.isEmpty();
    java.util.Iterator iterator48 = ringBuffer42.iterator();
    exercise03.RingBuffer ringBuffer50 = new exercise03.RingBuffer(1);
    boolean b51 = ringBuffer50.isEmpty();
    java.util.Spliterator spliterator52 = ringBuffer50.spliterator();
    java.util.Spliterator spliterator53 = ringBuffer50.spliterator();
    java.util.Iterator iterator54 = ringBuffer50.iterator();
    java.util.Iterator iterator55 = ringBuffer50.iterator();
    boolean b56 = ringBuffer50.isEmpty();
    ringBuffer42.enqueue((java.lang.Object)ringBuffer50);
    boolean b58 = ringBuffer42.isEmpty();
    ringBuffer32.enqueue((java.lang.Object)ringBuffer42);
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer32);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 'a'+ "'", obj17.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test402"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    int i9 = ringBuffer3.size();
    java.util.Spliterator spliterator10 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator11 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer3.spliterator();
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(1);
    boolean b16 = ringBuffer15.isEmpty();
    java.util.Spliterator spliterator17 = ringBuffer15.spliterator();
    java.util.Spliterator spliterator18 = ringBuffer15.spliterator();
    java.util.Iterator iterator19 = ringBuffer15.iterator();
    boolean b20 = ringBuffer15.isEmpty();
    int i21 = ringBuffer15.size();
    java.util.Spliterator spliterator22 = ringBuffer15.spliterator();
    exercise03.RingBuffer ringBuffer24 = new exercise03.RingBuffer(1);
    boolean b25 = ringBuffer24.isEmpty();
    java.util.Spliterator spliterator26 = ringBuffer24.spliterator();
    java.util.Spliterator spliterator27 = ringBuffer24.spliterator();
    java.util.Spliterator spliterator28 = ringBuffer24.spliterator();
    java.util.Iterator iterator29 = ringBuffer24.iterator();
    ringBuffer15.enqueue((java.lang.Object)iterator29);
    ringBuffer3.enqueue((java.lang.Object)iterator29);
    boolean b32 = ringBuffer3.isEmpty();
    int i33 = ringBuffer3.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer3);
    java.util.Spliterator spliterator35 = ringBuffer3.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test403"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)false);
    java.lang.Object obj4 = ringBuffer1.dequeue();
    boolean b5 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer7.spliterator();
    java.util.Iterator iterator11 = ringBuffer7.iterator();
    java.util.Iterator iterator12 = ringBuffer7.iterator();
    boolean b13 = ringBuffer7.isEmpty();
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(1);
    boolean b16 = ringBuffer15.isEmpty();
    java.util.Spliterator spliterator17 = ringBuffer15.spliterator();
    java.util.Spliterator spliterator18 = ringBuffer15.spliterator();
    ringBuffer7.enqueue((java.lang.Object)ringBuffer15);
    boolean b20 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer7.spliterator();
    int i22 = ringBuffer7.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer7);
    java.util.Iterator iterator24 = ringBuffer7.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + false+ "'", obj4.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator24);

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test404"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    int i9 = ringBuffer1.size();
    boolean b10 = ringBuffer1.isEmpty();
    int i11 = ringBuffer1.size();
    java.util.function.Consumer consumer12 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test405"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator11 = ringBuffer1.spliterator();
    java.util.Iterator iterator12 = ringBuffer1.iterator();
    java.util.Iterator iterator13 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(1);
    boolean b16 = ringBuffer15.isEmpty();
    int i17 = ringBuffer15.size();
    ringBuffer1.enqueue((java.lang.Object)i17);
    int i19 = ringBuffer1.size();
    java.lang.Object obj20 = ringBuffer1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 0+ "'", obj20.equals(0));

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test406"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    int i6 = ringBuffer1.size();
    boolean b7 = ringBuffer1.isEmpty();
    boolean b8 = ringBuffer1.isEmpty();
    java.lang.Object obj9 = ringBuffer1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + '#'+ "'", obj9.equals('#'));

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test407"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    boolean b7 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test408"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    boolean b5 = ringBuffer1.isEmpty();
    int i6 = ringBuffer1.size();
    boolean b7 = ringBuffer1.isEmpty();
    boolean b8 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    java.util.Iterator iterator11 = ringBuffer10.iterator();
    java.util.Iterator iterator12 = ringBuffer10.iterator();
    java.lang.Object obj13 = null;
    ringBuffer10.enqueue(obj13);
    ringBuffer1.enqueue(obj13);
    exercise03.RingBuffer ringBuffer17 = new exercise03.RingBuffer(1);
    java.util.Spliterator spliterator18 = ringBuffer17.spliterator();
    int i19 = ringBuffer17.size();
    ringBuffer1.enqueue((java.lang.Object)i19);
    boolean b21 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test409"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    boolean b10 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer12 = new exercise03.RingBuffer(1);
    boolean b13 = ringBuffer12.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer12);
    java.util.function.Consumer consumer15 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test410"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.lang.Object obj4 = ringBuffer1.dequeue();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.lang.Object obj6 = null;
    ringBuffer1.enqueue(obj6);
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.lang.Object obj9 = ringBuffer1.dequeue();
    boolean b10 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 'a'+ "'", obj4.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test411"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator16 = ringBuffer15.iterator();
    ringBuffer9.enqueue((java.lang.Object)ringBuffer15);
    java.util.Iterator iterator18 = ringBuffer15.iterator();
    exercise03.RingBuffer ringBuffer20 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(1);
    boolean b23 = ringBuffer22.isEmpty();
    java.util.Spliterator spliterator24 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator25 = ringBuffer22.spliterator();
    java.util.Iterator iterator26 = ringBuffer22.iterator();
    boolean b27 = ringBuffer22.isEmpty();
    int i28 = ringBuffer22.size();
    java.util.Spliterator spliterator29 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator30 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator31 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator32 = ringBuffer22.spliterator();
    exercise03.RingBuffer ringBuffer34 = new exercise03.RingBuffer(1);
    boolean b35 = ringBuffer34.isEmpty();
    java.util.Spliterator spliterator36 = ringBuffer34.spliterator();
    java.util.Spliterator spliterator37 = ringBuffer34.spliterator();
    java.util.Iterator iterator38 = ringBuffer34.iterator();
    boolean b39 = ringBuffer34.isEmpty();
    int i40 = ringBuffer34.size();
    java.util.Spliterator spliterator41 = ringBuffer34.spliterator();
    exercise03.RingBuffer ringBuffer43 = new exercise03.RingBuffer(1);
    boolean b44 = ringBuffer43.isEmpty();
    java.util.Spliterator spliterator45 = ringBuffer43.spliterator();
    java.util.Spliterator spliterator46 = ringBuffer43.spliterator();
    java.util.Spliterator spliterator47 = ringBuffer43.spliterator();
    java.util.Iterator iterator48 = ringBuffer43.iterator();
    ringBuffer34.enqueue((java.lang.Object)iterator48);
    ringBuffer22.enqueue((java.lang.Object)iterator48);
    boolean b51 = ringBuffer22.isEmpty();
    int i52 = ringBuffer22.size();
    ringBuffer20.enqueue((java.lang.Object)ringBuffer22);
    ringBuffer15.enqueue((java.lang.Object)ringBuffer20);
    boolean b55 = ringBuffer15.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test412"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    boolean b17 = ringBuffer1.isEmpty();
    boolean b18 = ringBuffer1.isEmpty();
    java.lang.Object obj19 = ringBuffer1.dequeue();
    boolean b20 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test413"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)false);
    ringBuffer1.enqueue((java.lang.Object)(short)0);
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    ringBuffer7.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator10 = ringBuffer7.spliterator();
    int i11 = ringBuffer7.size();
    boolean b12 = ringBuffer7.isEmpty();
    boolean b13 = ringBuffer7.isEmpty();
    java.util.Iterator iterator14 = ringBuffer7.iterator();
    int i15 = ringBuffer7.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer7);
    java.lang.Object obj17 = ringBuffer1.dequeue();
    boolean b18 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer19 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + false+ "'", obj17.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test414"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Spliterator spliterator19 = ringBuffer10.spliterator();
    int i20 = ringBuffer10.size();
    java.util.function.Consumer consumer21 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer10.forEach(consumer21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test415"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    int i10 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer12 = new exercise03.RingBuffer(1);
    boolean b13 = ringBuffer12.isEmpty();
    java.util.Spliterator spliterator14 = ringBuffer12.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer12.spliterator();
    java.util.Iterator iterator16 = ringBuffer12.iterator();
    java.util.Iterator iterator17 = ringBuffer12.iterator();
    java.util.Spliterator spliterator18 = ringBuffer12.spliterator();
    java.util.Spliterator spliterator19 = ringBuffer12.spliterator();
    int i20 = ringBuffer12.size();
    java.util.Spliterator spliterator21 = ringBuffer12.spliterator();
    exercise03.RingBuffer ringBuffer23 = new exercise03.RingBuffer(10);
    ringBuffer23.enqueue((java.lang.Object)false);
    ringBuffer23.enqueue((java.lang.Object)(short)0);
    java.util.Spliterator spliterator28 = ringBuffer23.spliterator();
    ringBuffer12.enqueue((java.lang.Object)ringBuffer23);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer23);
    java.lang.Object obj31 = ringBuffer1.dequeue();
    java.util.Iterator iterator32 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator32);

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test416"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    int i6 = ringBuffer1.size();
    int i7 = ringBuffer1.size();
    java.util.function.Consumer consumer8 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test417"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    boolean b9 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    ringBuffer11.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    int i15 = ringBuffer11.size();
    java.util.Spliterator spliterator16 = ringBuffer11.spliterator();
    java.util.Iterator iterator17 = ringBuffer11.iterator();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    java.util.Iterator iterator19 = ringBuffer11.iterator();
    int i20 = ringBuffer11.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer11);
    java.lang.Object obj22 = ringBuffer1.dequeue();
    java.util.Iterator iterator23 = ringBuffer1.iterator();
    java.util.Spliterator spliterator24 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test418"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    boolean b16 = ringBuffer11.isEmpty();
    int i17 = ringBuffer11.size();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    ringBuffer3.enqueue((java.lang.Object)spliterator18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer3);
    java.util.Spliterator spliterator21 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test419"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    boolean b9 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    ringBuffer11.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    int i15 = ringBuffer11.size();
    java.util.Spliterator spliterator16 = ringBuffer11.spliterator();
    java.util.Iterator iterator17 = ringBuffer11.iterator();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    java.util.Iterator iterator19 = ringBuffer11.iterator();
    int i20 = ringBuffer11.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer11);
    int i22 = ringBuffer11.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test420"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    int i7 = ringBuffer1.size();
    int i8 = ringBuffer1.size();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    java.util.Iterator iterator16 = ringBuffer11.iterator();
    java.util.Spliterator spliterator17 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    int i19 = ringBuffer11.size();
    boolean b20 = ringBuffer11.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)b20);
    boolean b22 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer23 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test421"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    boolean b6 = ringBuffer1.isEmpty();
    boolean b7 = ringBuffer1.isEmpty();
    boolean b8 = ringBuffer1.isEmpty();
    boolean b9 = ringBuffer1.isEmpty();
    int i10 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer12 = new exercise03.RingBuffer(1);
    boolean b13 = ringBuffer12.isEmpty();
    java.util.Spliterator spliterator14 = ringBuffer12.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer12.spliterator();
    java.util.Iterator iterator16 = ringBuffer12.iterator();
    boolean b17 = ringBuffer12.isEmpty();
    int i18 = ringBuffer12.size();
    java.util.Iterator iterator19 = ringBuffer12.iterator();
    exercise03.RingBuffer ringBuffer21 = new exercise03.RingBuffer(1);
    boolean b22 = ringBuffer21.isEmpty();
    java.util.Spliterator spliterator23 = ringBuffer21.spliterator();
    java.util.Spliterator spliterator24 = ringBuffer21.spliterator();
    java.util.Iterator iterator25 = ringBuffer21.iterator();
    boolean b26 = ringBuffer21.isEmpty();
    int i27 = ringBuffer21.size();
    java.util.Spliterator spliterator28 = ringBuffer21.spliterator();
    ringBuffer12.enqueue((java.lang.Object)ringBuffer21);
    java.util.Iterator iterator30 = ringBuffer21.iterator();
    boolean b31 = ringBuffer21.isEmpty();
    exercise03.RingBuffer ringBuffer33 = new exercise03.RingBuffer(1);
    boolean b34 = ringBuffer33.isEmpty();
    java.util.Spliterator spliterator35 = ringBuffer33.spliterator();
    java.util.Spliterator spliterator36 = ringBuffer33.spliterator();
    java.util.Iterator iterator37 = ringBuffer33.iterator();
    java.util.Iterator iterator38 = ringBuffer33.iterator();
    boolean b39 = ringBuffer33.isEmpty();
    int i40 = ringBuffer33.size();
    boolean b41 = ringBuffer33.isEmpty();
    ringBuffer33.enqueue((java.lang.Object)'#');
    ringBuffer21.enqueue((java.lang.Object)'#');
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)'#');
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test422"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    boolean b3 = ringBuffer1.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj4 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test423"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer11.spliterator();
    java.util.Iterator iterator16 = ringBuffer11.iterator();
    ringBuffer8.enqueue((java.lang.Object)ringBuffer11);
    int i18 = ringBuffer8.size();
    java.lang.Object obj19 = ringBuffer8.dequeue();
    java.util.function.Consumer consumer20 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer8.forEach(consumer20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test424"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Iterator iterator11 = ringBuffer1.iterator();
    boolean b12 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer13 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test425"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    boolean b17 = ringBuffer1.isEmpty();
    boolean b18 = ringBuffer1.isEmpty();
    java.lang.Object obj19 = ringBuffer1.dequeue();
    exercise03.RingBuffer ringBuffer21 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator22 = ringBuffer21.iterator();
    java.util.Iterator iterator23 = ringBuffer21.iterator();
    int i24 = ringBuffer21.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer21);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj26 = ringBuffer21.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test426"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(0);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Iterator iterator3 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator3);

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test427"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    boolean b15 = ringBuffer9.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    boolean b17 = ringBuffer1.isEmpty();
    java.lang.Object obj18 = ringBuffer1.dequeue();
    exercise03.RingBuffer ringBuffer20 = new exercise03.RingBuffer(1);
    boolean b21 = ringBuffer20.isEmpty();
    java.util.Spliterator spliterator22 = ringBuffer20.spliterator();
    java.util.Spliterator spliterator23 = ringBuffer20.spliterator();
    java.util.Spliterator spliterator24 = ringBuffer20.spliterator();
    java.util.Iterator iterator25 = ringBuffer20.iterator();
    int i26 = ringBuffer20.size();
    boolean b27 = ringBuffer20.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)b27);
    java.util.Iterator iterator29 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator29);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test428"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    int i7 = ringBuffer1.size();
    java.util.function.Consumer consumer8 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test429"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.function.Consumer consumer6 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test430"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator2 = ringBuffer1.iterator();
    java.util.Iterator iterator3 = ringBuffer1.iterator();
    java.util.Iterator iterator4 = ringBuffer1.iterator();
    boolean b5 = ringBuffer1.isEmpty();
    int i6 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test431"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    int i2 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer4 = new exercise03.RingBuffer(1);
    boolean b5 = ringBuffer4.isEmpty();
    java.util.Spliterator spliterator6 = ringBuffer4.spliterator();
    java.util.Spliterator spliterator7 = ringBuffer4.spliterator();
    java.util.Iterator iterator8 = ringBuffer4.iterator();
    boolean b9 = ringBuffer4.isEmpty();
    java.util.Iterator iterator10 = ringBuffer4.iterator();
    exercise03.RingBuffer ringBuffer12 = new exercise03.RingBuffer(1);
    boolean b13 = ringBuffer12.isEmpty();
    java.util.Spliterator spliterator14 = ringBuffer12.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer12.spliterator();
    java.util.Iterator iterator16 = ringBuffer12.iterator();
    java.util.Iterator iterator17 = ringBuffer12.iterator();
    boolean b18 = ringBuffer12.isEmpty();
    ringBuffer4.enqueue((java.lang.Object)ringBuffer12);
    boolean b20 = ringBuffer4.isEmpty();
    boolean b21 = ringBuffer4.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer4);
    java.lang.Object obj23 = ringBuffer1.dequeue();
    java.util.Spliterator spliterator24 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test432"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    int i9 = ringBuffer1.size();
    int i10 = ringBuffer1.size();
    int i11 = ringBuffer1.size();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj12 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test433"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(100);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator9);
    java.util.function.Consumer consumer11 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test434"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    boolean b5 = ringBuffer1.isEmpty();
    int i6 = ringBuffer1.size();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test435"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    int i9 = ringBuffer1.size();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator11 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test436"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.lang.Object obj19 = ringBuffer1.dequeue();
    java.util.Iterator iterator20 = ringBuffer1.iterator();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj21 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test437"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator16 = ringBuffer15.iterator();
    ringBuffer9.enqueue((java.lang.Object)ringBuffer15);
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    java.util.Iterator iterator23 = ringBuffer19.iterator();
    boolean b24 = ringBuffer19.isEmpty();
    int i25 = ringBuffer19.size();
    java.util.Iterator iterator26 = ringBuffer19.iterator();
    exercise03.RingBuffer ringBuffer28 = new exercise03.RingBuffer(1);
    boolean b29 = ringBuffer28.isEmpty();
    java.util.Spliterator spliterator30 = ringBuffer28.spliterator();
    java.util.Spliterator spliterator31 = ringBuffer28.spliterator();
    java.util.Iterator iterator32 = ringBuffer28.iterator();
    boolean b33 = ringBuffer28.isEmpty();
    int i34 = ringBuffer28.size();
    java.util.Spliterator spliterator35 = ringBuffer28.spliterator();
    ringBuffer19.enqueue((java.lang.Object)ringBuffer28);
    java.util.Spliterator spliterator37 = ringBuffer28.spliterator();
    boolean b38 = ringBuffer28.isEmpty();
    ringBuffer15.enqueue((java.lang.Object)b38);
    java.util.Spliterator spliterator40 = ringBuffer15.spliterator();
    exercise03.RingBuffer ringBuffer42 = new exercise03.RingBuffer(1);
    boolean b43 = ringBuffer42.isEmpty();
    java.util.Spliterator spliterator44 = ringBuffer42.spliterator();
    java.util.Spliterator spliterator45 = ringBuffer42.spliterator();
    java.util.Spliterator spliterator46 = ringBuffer42.spliterator();
    java.util.Iterator iterator47 = ringBuffer42.iterator();
    exercise03.RingBuffer ringBuffer49 = new exercise03.RingBuffer(1);
    ringBuffer49.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator52 = ringBuffer49.spliterator();
    java.lang.Object obj53 = ringBuffer49.dequeue();
    java.util.Spliterator spliterator54 = ringBuffer49.spliterator();
    ringBuffer42.enqueue((java.lang.Object)spliterator54);
    java.util.Spliterator spliterator56 = ringBuffer42.spliterator();
    ringBuffer15.enqueue((java.lang.Object)ringBuffer42);
    boolean b58 = ringBuffer42.isEmpty();
    exercise03.RingBuffer ringBuffer60 = new exercise03.RingBuffer(10);
    ringBuffer60.enqueue((java.lang.Object)'#');
    int i63 = ringBuffer60.size();
    java.util.Iterator iterator64 = ringBuffer60.iterator();
    exercise03.RingBuffer ringBuffer66 = new exercise03.RingBuffer(1);
    boolean b67 = ringBuffer66.isEmpty();
    java.util.Spliterator spliterator68 = ringBuffer66.spliterator();
    ringBuffer60.enqueue((java.lang.Object)ringBuffer66);
    int i70 = ringBuffer66.size();
    boolean b71 = ringBuffer66.isEmpty();
    int i72 = ringBuffer66.size();
    int i73 = ringBuffer66.size();
    java.util.Iterator iterator74 = ringBuffer66.iterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer42.enqueue((java.lang.Object)ringBuffer66);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj53 + "' != '" + 'a'+ "'", obj53.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator74);

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test438"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator16 = ringBuffer15.iterator();
    ringBuffer9.enqueue((java.lang.Object)ringBuffer15);
    java.util.Iterator iterator18 = ringBuffer15.iterator();
    boolean b19 = ringBuffer15.isEmpty();
    java.util.Spliterator spliterator20 = ringBuffer15.spliterator();
    java.util.function.Consumer consumer21 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer15.forEach(consumer21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test439"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    boolean b16 = ringBuffer11.isEmpty();
    int i17 = ringBuffer11.size();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    ringBuffer3.enqueue((java.lang.Object)spliterator18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer3);
    boolean b21 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator22 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test440"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Iterator iterator4 = ringBuffer1.iterator();
    int i5 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    boolean b14 = ringBuffer9.isEmpty();
    java.util.Iterator iterator15 = ringBuffer9.iterator();
    exercise03.RingBuffer ringBuffer17 = new exercise03.RingBuffer(1);
    boolean b18 = ringBuffer17.isEmpty();
    java.util.Spliterator spliterator19 = ringBuffer17.spliterator();
    java.util.Spliterator spliterator20 = ringBuffer17.spliterator();
    java.util.Iterator iterator21 = ringBuffer17.iterator();
    boolean b22 = ringBuffer17.isEmpty();
    int i23 = ringBuffer17.size();
    java.util.Spliterator spliterator24 = ringBuffer17.spliterator();
    ringBuffer9.enqueue((java.lang.Object)spliterator24);
    ringBuffer7.enqueue((java.lang.Object)ringBuffer9);
    int i27 = ringBuffer9.size();
    java.util.Iterator iterator28 = ringBuffer9.iterator();
    java.lang.Object obj29 = ringBuffer9.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test441"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    int i9 = ringBuffer1.size();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer12 = new exercise03.RingBuffer(10);
    ringBuffer12.enqueue((java.lang.Object)false);
    ringBuffer12.enqueue((java.lang.Object)(short)0);
    java.util.Spliterator spliterator17 = ringBuffer12.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer12);
    java.util.Spliterator spliterator19 = ringBuffer1.spliterator();
    int i20 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test442"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    int i7 = ringBuffer1.size();
    int i8 = ringBuffer1.size();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    int i10 = ringBuffer1.size();
    int i11 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test443"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.lang.Object obj4 = ringBuffer1.dequeue();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    ringBuffer7.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator10 = ringBuffer7.spliterator();
    int i11 = ringBuffer7.size();
    java.util.Spliterator spliterator12 = ringBuffer7.spliterator();
    java.util.Iterator iterator13 = ringBuffer7.iterator();
    java.util.Spliterator spliterator14 = ringBuffer7.spliterator();
    java.util.Iterator iterator15 = ringBuffer7.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    exercise03.RingBuffer ringBuffer18 = new exercise03.RingBuffer(1);
    boolean b19 = ringBuffer18.isEmpty();
    boolean b20 = ringBuffer18.isEmpty();
    int i21 = ringBuffer18.size();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer18);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj4 + "' != '" + 'a'+ "'", obj4.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test444"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    int i7 = ringBuffer1.size();
    java.lang.Object obj8 = ringBuffer1.dequeue();
    int i9 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer11.spliterator();
    java.util.Iterator iterator16 = ringBuffer11.iterator();
    int i17 = ringBuffer11.size();
    boolean b18 = ringBuffer11.isEmpty();
    boolean b19 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator20 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator21 = ringBuffer11.spliterator();
    java.util.Iterator iterator22 = ringBuffer11.iterator();
    exercise03.RingBuffer ringBuffer24 = new exercise03.RingBuffer(0);
    java.util.Spliterator spliterator25 = ringBuffer24.spliterator();
    ringBuffer11.enqueue((java.lang.Object)ringBuffer24);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer11);
    exercise03.RingBuffer ringBuffer29 = new exercise03.RingBuffer(1);
    boolean b30 = ringBuffer29.isEmpty();
    java.util.Spliterator spliterator31 = ringBuffer29.spliterator();
    java.util.Spliterator spliterator32 = ringBuffer29.spliterator();
    java.util.Iterator iterator33 = ringBuffer29.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator33);
    boolean b35 = ringBuffer1.isEmpty();
    int i36 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + '#'+ "'", obj8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 2);

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test445"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    int i7 = ringBuffer1.size();
    java.lang.Object obj8 = ringBuffer1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 'a'+ "'", obj8.equals('a'));

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test446"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    int i10 = ringBuffer1.size();
    boolean b11 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer13 = new exercise03.RingBuffer(1);
    ringBuffer13.enqueue((java.lang.Object)'a');
    java.lang.Object obj16 = ringBuffer13.dequeue();
    java.util.Spliterator spliterator17 = ringBuffer13.spliterator();
    java.lang.Object obj18 = null;
    ringBuffer13.enqueue(obj18);
    java.util.Spliterator spliterator20 = ringBuffer13.spliterator();
    boolean b21 = ringBuffer13.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer13);
    java.util.Spliterator spliterator23 = ringBuffer13.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 'a'+ "'", obj16.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test447"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator16 = ringBuffer15.iterator();
    ringBuffer9.enqueue((java.lang.Object)ringBuffer15);
    boolean b18 = ringBuffer9.isEmpty();
    java.lang.Object obj19 = ringBuffer9.dequeue();
    java.util.Iterator iterator20 = ringBuffer9.iterator();
    java.util.function.Consumer consumer21 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer9.forEach(consumer21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test448"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    int i6 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer8.enqueue((java.lang.Object)'a');
    java.lang.Object obj11 = ringBuffer8.dequeue();
    ringBuffer8.enqueue((java.lang.Object)(short)1);
    java.util.Iterator iterator14 = ringBuffer8.iterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 'a'+ "'", obj11.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test449"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    java.util.Iterator iterator2 = ringBuffer1.iterator();
    java.util.Iterator iterator3 = ringBuffer1.iterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer7 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test450"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.lang.Object obj8 = ringBuffer1.dequeue();
    int i9 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + '#'+ "'", obj8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test451"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    int i7 = ringBuffer1.size();
    int i8 = ringBuffer1.size();
    int i9 = ringBuffer1.size();
    int i10 = ringBuffer1.size();
    int i11 = ringBuffer1.size();
    int i12 = ringBuffer1.size();
    int i13 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test452"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    java.lang.Object obj17 = ringBuffer1.dequeue();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator23 = ringBuffer19.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator23);
    java.lang.Object obj25 = ringBuffer1.dequeue();
    boolean b26 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator27 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test453"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    boolean b5 = ringBuffer1.isEmpty();
    int i6 = ringBuffer1.size();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    boolean b14 = ringBuffer9.isEmpty();
    int i15 = ringBuffer9.size();
    java.util.Spliterator spliterator16 = ringBuffer9.spliterator();
    exercise03.RingBuffer ringBuffer18 = new exercise03.RingBuffer(1);
    boolean b19 = ringBuffer18.isEmpty();
    java.util.Spliterator spliterator20 = ringBuffer18.spliterator();
    java.util.Spliterator spliterator21 = ringBuffer18.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer18.spliterator();
    java.util.Iterator iterator23 = ringBuffer18.iterator();
    ringBuffer9.enqueue((java.lang.Object)iterator23);
    java.lang.Object obj25 = ringBuffer9.dequeue();
    exercise03.RingBuffer ringBuffer27 = new exercise03.RingBuffer(1);
    boolean b28 = ringBuffer27.isEmpty();
    java.util.Spliterator spliterator29 = ringBuffer27.spliterator();
    java.util.Spliterator spliterator30 = ringBuffer27.spliterator();
    java.util.Spliterator spliterator31 = ringBuffer27.spliterator();
    ringBuffer9.enqueue((java.lang.Object)spliterator31);
    java.lang.Object obj33 = ringBuffer9.dequeue();
    ringBuffer9.enqueue((java.lang.Object)(byte)100);
    java.lang.Object obj36 = ringBuffer9.dequeue();
    ringBuffer1.enqueue(obj36);
    java.util.function.Consumer consumer38 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer38);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + (byte)100+ "'", obj36.equals((byte)100));

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test454"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Iterator iterator3 = ringBuffer1.iterator();
    boolean b4 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer6 = new exercise03.RingBuffer(1);
    boolean b7 = ringBuffer6.isEmpty();
    java.util.Spliterator spliterator8 = ringBuffer6.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer6.spliterator();
    java.util.Iterator iterator10 = ringBuffer6.iterator();
    java.util.Iterator iterator11 = ringBuffer6.iterator();
    boolean b12 = ringBuffer6.isEmpty();
    exercise03.RingBuffer ringBuffer14 = new exercise03.RingBuffer(1);
    boolean b15 = ringBuffer14.isEmpty();
    java.util.Spliterator spliterator16 = ringBuffer14.spliterator();
    java.util.Spliterator spliterator17 = ringBuffer14.spliterator();
    ringBuffer6.enqueue((java.lang.Object)ringBuffer14);
    exercise03.RingBuffer ringBuffer20 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator21 = ringBuffer20.iterator();
    ringBuffer14.enqueue((java.lang.Object)ringBuffer20);
    exercise03.RingBuffer ringBuffer24 = new exercise03.RingBuffer(1);
    boolean b25 = ringBuffer24.isEmpty();
    java.util.Spliterator spliterator26 = ringBuffer24.spliterator();
    java.util.Spliterator spliterator27 = ringBuffer24.spliterator();
    java.util.Iterator iterator28 = ringBuffer24.iterator();
    boolean b29 = ringBuffer24.isEmpty();
    int i30 = ringBuffer24.size();
    java.util.Iterator iterator31 = ringBuffer24.iterator();
    exercise03.RingBuffer ringBuffer33 = new exercise03.RingBuffer(1);
    boolean b34 = ringBuffer33.isEmpty();
    java.util.Spliterator spliterator35 = ringBuffer33.spliterator();
    java.util.Spliterator spliterator36 = ringBuffer33.spliterator();
    java.util.Iterator iterator37 = ringBuffer33.iterator();
    boolean b38 = ringBuffer33.isEmpty();
    int i39 = ringBuffer33.size();
    java.util.Spliterator spliterator40 = ringBuffer33.spliterator();
    ringBuffer24.enqueue((java.lang.Object)ringBuffer33);
    java.util.Spliterator spliterator42 = ringBuffer33.spliterator();
    boolean b43 = ringBuffer33.isEmpty();
    ringBuffer20.enqueue((java.lang.Object)b43);
    java.util.Spliterator spliterator45 = ringBuffer20.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator45);
    boolean b47 = ringBuffer1.isEmpty();
    boolean b48 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test455"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    java.util.Iterator iterator2 = ringBuffer1.iterator();
    int i3 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test456"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    boolean b16 = ringBuffer10.isEmpty();
    exercise03.RingBuffer ringBuffer18 = new exercise03.RingBuffer(1);
    boolean b19 = ringBuffer18.isEmpty();
    java.util.Spliterator spliterator20 = ringBuffer18.spliterator();
    java.util.Spliterator spliterator21 = ringBuffer18.spliterator();
    ringBuffer10.enqueue((java.lang.Object)ringBuffer18);
    java.util.Iterator iterator23 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    int i25 = ringBuffer10.size();
    boolean b26 = ringBuffer10.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test457"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    boolean b16 = ringBuffer11.isEmpty();
    int i17 = ringBuffer11.size();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    ringBuffer3.enqueue((java.lang.Object)spliterator18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer3);
    int i21 = ringBuffer3.size();
    java.util.Iterator iterator22 = ringBuffer3.iterator();
    java.util.Spliterator spliterator23 = ringBuffer3.spliterator();
    java.lang.Object obj24 = ringBuffer3.dequeue();
    int i25 = ringBuffer3.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test458"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer7);
    int i11 = ringBuffer7.size();
    boolean b12 = ringBuffer7.isEmpty();
    int i13 = ringBuffer7.size();
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer17 = new exercise03.RingBuffer(1);
    boolean b18 = ringBuffer17.isEmpty();
    java.util.Spliterator spliterator19 = ringBuffer17.spliterator();
    java.util.Spliterator spliterator20 = ringBuffer17.spliterator();
    java.util.Iterator iterator21 = ringBuffer17.iterator();
    boolean b22 = ringBuffer17.isEmpty();
    java.util.Iterator iterator23 = ringBuffer17.iterator();
    exercise03.RingBuffer ringBuffer25 = new exercise03.RingBuffer(1);
    boolean b26 = ringBuffer25.isEmpty();
    java.util.Spliterator spliterator27 = ringBuffer25.spliterator();
    java.util.Spliterator spliterator28 = ringBuffer25.spliterator();
    java.util.Iterator iterator29 = ringBuffer25.iterator();
    boolean b30 = ringBuffer25.isEmpty();
    int i31 = ringBuffer25.size();
    java.util.Spliterator spliterator32 = ringBuffer25.spliterator();
    ringBuffer17.enqueue((java.lang.Object)spliterator32);
    ringBuffer15.enqueue((java.lang.Object)ringBuffer17);
    int i35 = ringBuffer17.size();
    boolean b36 = ringBuffer17.isEmpty();
    ringBuffer7.enqueue((java.lang.Object)b36);
    boolean b38 = ringBuffer7.isEmpty();
    boolean b39 = ringBuffer7.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test459"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.lang.Object obj5 = ringBuffer1.dequeue();
    boolean b6 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 'a'+ "'", obj5.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test460"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    boolean b6 = ringBuffer1.isEmpty();
    boolean b7 = ringBuffer1.isEmpty();
    int i8 = ringBuffer1.size();
    java.lang.Object obj9 = ringBuffer1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 'a'+ "'", obj9.equals('a'));

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test461"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(100);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator9);
    boolean b11 = ringBuffer1.isEmpty();
    int i12 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer14 = new exercise03.RingBuffer(1);
    boolean b15 = ringBuffer14.isEmpty();
    java.util.Spliterator spliterator16 = ringBuffer14.spliterator();
    java.util.Spliterator spliterator17 = ringBuffer14.spliterator();
    java.util.Iterator iterator18 = ringBuffer14.iterator();
    boolean b19 = ringBuffer14.isEmpty();
    int i20 = ringBuffer14.size();
    java.util.Spliterator spliterator21 = ringBuffer14.spliterator();
    exercise03.RingBuffer ringBuffer23 = new exercise03.RingBuffer(1);
    boolean b24 = ringBuffer23.isEmpty();
    java.util.Spliterator spliterator25 = ringBuffer23.spliterator();
    java.util.Spliterator spliterator26 = ringBuffer23.spliterator();
    java.util.Spliterator spliterator27 = ringBuffer23.spliterator();
    java.util.Iterator iterator28 = ringBuffer23.iterator();
    ringBuffer14.enqueue((java.lang.Object)iterator28);
    java.lang.Object obj30 = ringBuffer14.dequeue();
    exercise03.RingBuffer ringBuffer32 = new exercise03.RingBuffer(1);
    boolean b33 = ringBuffer32.isEmpty();
    java.util.Spliterator spliterator34 = ringBuffer32.spliterator();
    java.util.Spliterator spliterator35 = ringBuffer32.spliterator();
    java.util.Spliterator spliterator36 = ringBuffer32.spliterator();
    ringBuffer14.enqueue((java.lang.Object)spliterator36);
    java.lang.Object obj38 = ringBuffer14.dequeue();
    boolean b39 = ringBuffer14.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer14);
    java.lang.Object obj41 = ringBuffer1.dequeue();
    boolean b42 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test462"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Iterator iterator15 = ringBuffer11.iterator();
    boolean b16 = ringBuffer11.isEmpty();
    int i17 = ringBuffer11.size();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    ringBuffer3.enqueue((java.lang.Object)spliterator18);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer3);
    java.util.Iterator iterator21 = ringBuffer3.iterator();
    java.util.Iterator iterator22 = ringBuffer3.iterator();
    java.util.Spliterator spliterator23 = ringBuffer3.spliterator();
    java.util.function.Consumer consumer24 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer3.forEach(consumer24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test463"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    boolean b14 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer1.spliterator();
    boolean b16 = ringBuffer1.isEmpty();
    java.util.Iterator iterator17 = ringBuffer1.iterator();
    java.util.Spliterator spliterator18 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator19 = ringBuffer1.spliterator();
    java.util.function.Consumer consumer20 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test464"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator2 = ringBuffer1.iterator();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test465"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer7);
    int i11 = ringBuffer7.size();
    boolean b12 = ringBuffer7.isEmpty();
    exercise03.RingBuffer ringBuffer14 = new exercise03.RingBuffer(1);
    ringBuffer14.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator17 = ringBuffer14.spliterator();
    int i18 = ringBuffer14.size();
    java.util.Spliterator spliterator19 = ringBuffer14.spliterator();
    java.util.Iterator iterator20 = ringBuffer14.iterator();
    ringBuffer7.enqueue((java.lang.Object)iterator20);
    int i22 = ringBuffer7.size();
    exercise03.RingBuffer ringBuffer24 = new exercise03.RingBuffer(1);
    boolean b25 = ringBuffer24.isEmpty();
    java.util.Spliterator spliterator26 = ringBuffer24.spliterator();
    java.util.Spliterator spliterator27 = ringBuffer24.spliterator();
    java.util.Iterator iterator28 = ringBuffer24.iterator();
    boolean b29 = ringBuffer24.isEmpty();
    java.util.Iterator iterator30 = ringBuffer24.iterator();
    exercise03.RingBuffer ringBuffer32 = new exercise03.RingBuffer(1);
    boolean b33 = ringBuffer32.isEmpty();
    java.util.Spliterator spliterator34 = ringBuffer32.spliterator();
    java.util.Spliterator spliterator35 = ringBuffer32.spliterator();
    java.util.Spliterator spliterator36 = ringBuffer32.spliterator();
    java.util.Iterator iterator37 = ringBuffer32.iterator();
    int i38 = ringBuffer32.size();
    ringBuffer24.enqueue((java.lang.Object)ringBuffer32);
    java.util.Spliterator spliterator40 = ringBuffer24.spliterator();
    java.lang.Object obj41 = ringBuffer24.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer7.enqueue((java.lang.Object)ringBuffer24);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj41);

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test466"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    java.lang.Object obj17 = ringBuffer1.dequeue();
    exercise03.RingBuffer ringBuffer19 = new exercise03.RingBuffer(1);
    boolean b20 = ringBuffer19.isEmpty();
    java.util.Spliterator spliterator21 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator22 = ringBuffer19.spliterator();
    java.util.Spliterator spliterator23 = ringBuffer19.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator23);
    java.util.Iterator iterator25 = ringBuffer1.iterator();
    java.util.function.Consumer consumer26 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer26);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator25);

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test467"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    int i9 = ringBuffer1.size();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer12 = new exercise03.RingBuffer(1);
    boolean b13 = ringBuffer12.isEmpty();
    java.util.Spliterator spliterator14 = ringBuffer12.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer12.spliterator();
    java.util.Spliterator spliterator16 = ringBuffer12.spliterator();
    java.util.Iterator iterator17 = ringBuffer12.iterator();
    int i18 = ringBuffer12.size();
    int i19 = ringBuffer12.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer12);
    boolean b21 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test468"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    java.util.Iterator iterator13 = ringBuffer9.iterator();
    java.util.Iterator iterator14 = ringBuffer9.iterator();
    boolean b15 = ringBuffer9.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    java.util.Spliterator spliterator17 = ringBuffer9.spliterator();
    int i18 = ringBuffer9.size();
    java.util.Iterator iterator19 = ringBuffer9.iterator();
    int i20 = ringBuffer9.size();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj21 = ringBuffer9.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test469"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    int i7 = ringBuffer1.size();
    java.lang.Object obj8 = ringBuffer1.dequeue();
    int i9 = ringBuffer1.size();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj10 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + '#'+ "'", obj8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test470"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(100);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator9);
    int i11 = ringBuffer1.size();
    boolean b12 = ringBuffer1.isEmpty();
    java.util.Iterator iterator13 = ringBuffer1.iterator();
    int i14 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer16 = new exercise03.RingBuffer(1);
    boolean b17 = ringBuffer16.isEmpty();
    java.util.Spliterator spliterator18 = ringBuffer16.spliterator();
    java.util.Spliterator spliterator19 = ringBuffer16.spliterator();
    java.util.Iterator iterator20 = ringBuffer16.iterator();
    boolean b21 = ringBuffer16.isEmpty();
    java.util.Iterator iterator22 = ringBuffer16.iterator();
    exercise03.RingBuffer ringBuffer24 = new exercise03.RingBuffer(1);
    boolean b25 = ringBuffer24.isEmpty();
    java.util.Spliterator spliterator26 = ringBuffer24.spliterator();
    java.util.Spliterator spliterator27 = ringBuffer24.spliterator();
    java.util.Spliterator spliterator28 = ringBuffer24.spliterator();
    java.util.Iterator iterator29 = ringBuffer24.iterator();
    int i30 = ringBuffer24.size();
    ringBuffer16.enqueue((java.lang.Object)ringBuffer24);
    java.util.Iterator iterator32 = ringBuffer16.iterator();
    java.util.Spliterator spliterator33 = ringBuffer16.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator33);
    java.lang.Object obj35 = ringBuffer1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test471"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    boolean b9 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test472"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    exercise03.RingBuffer ringBuffer15 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator16 = ringBuffer15.iterator();
    ringBuffer9.enqueue((java.lang.Object)ringBuffer15);
    java.util.Iterator iterator18 = ringBuffer15.iterator();
    exercise03.RingBuffer ringBuffer20 = new exercise03.RingBuffer(10);
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(1);
    boolean b23 = ringBuffer22.isEmpty();
    java.util.Spliterator spliterator24 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator25 = ringBuffer22.spliterator();
    java.util.Iterator iterator26 = ringBuffer22.iterator();
    boolean b27 = ringBuffer22.isEmpty();
    int i28 = ringBuffer22.size();
    java.util.Spliterator spliterator29 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator30 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator31 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator32 = ringBuffer22.spliterator();
    exercise03.RingBuffer ringBuffer34 = new exercise03.RingBuffer(1);
    boolean b35 = ringBuffer34.isEmpty();
    java.util.Spliterator spliterator36 = ringBuffer34.spliterator();
    java.util.Spliterator spliterator37 = ringBuffer34.spliterator();
    java.util.Iterator iterator38 = ringBuffer34.iterator();
    boolean b39 = ringBuffer34.isEmpty();
    int i40 = ringBuffer34.size();
    java.util.Spliterator spliterator41 = ringBuffer34.spliterator();
    exercise03.RingBuffer ringBuffer43 = new exercise03.RingBuffer(1);
    boolean b44 = ringBuffer43.isEmpty();
    java.util.Spliterator spliterator45 = ringBuffer43.spliterator();
    java.util.Spliterator spliterator46 = ringBuffer43.spliterator();
    java.util.Spliterator spliterator47 = ringBuffer43.spliterator();
    java.util.Iterator iterator48 = ringBuffer43.iterator();
    ringBuffer34.enqueue((java.lang.Object)iterator48);
    ringBuffer22.enqueue((java.lang.Object)iterator48);
    boolean b51 = ringBuffer22.isEmpty();
    int i52 = ringBuffer22.size();
    ringBuffer20.enqueue((java.lang.Object)ringBuffer22);
    ringBuffer15.enqueue((java.lang.Object)ringBuffer20);
    boolean b55 = ringBuffer20.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test473"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    boolean b9 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    ringBuffer11.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    int i15 = ringBuffer11.size();
    java.util.Spliterator spliterator16 = ringBuffer11.spliterator();
    java.util.Iterator iterator17 = ringBuffer11.iterator();
    java.util.Spliterator spliterator18 = ringBuffer11.spliterator();
    java.util.Iterator iterator19 = ringBuffer11.iterator();
    int i20 = ringBuffer11.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer11);
    boolean b22 = ringBuffer11.isEmpty();
    exercise03.RingBuffer ringBuffer24 = new exercise03.RingBuffer(1);
    boolean b25 = ringBuffer24.isEmpty();
    java.util.Spliterator spliterator26 = ringBuffer24.spliterator();
    java.util.Spliterator spliterator27 = ringBuffer24.spliterator();
    java.util.Iterator iterator28 = ringBuffer24.iterator();
    boolean b29 = ringBuffer24.isEmpty();
    java.util.Iterator iterator30 = ringBuffer24.iterator();
    exercise03.RingBuffer ringBuffer32 = new exercise03.RingBuffer(1);
    boolean b33 = ringBuffer32.isEmpty();
    java.util.Spliterator spliterator34 = ringBuffer32.spliterator();
    java.util.Spliterator spliterator35 = ringBuffer32.spliterator();
    java.util.Iterator iterator36 = ringBuffer32.iterator();
    java.util.Iterator iterator37 = ringBuffer32.iterator();
    boolean b38 = ringBuffer32.isEmpty();
    ringBuffer24.enqueue((java.lang.Object)ringBuffer32);
    java.util.Spliterator spliterator40 = ringBuffer32.spliterator();
    java.util.Iterator iterator41 = ringBuffer32.iterator();
    exercise03.RingBuffer ringBuffer43 = new exercise03.RingBuffer(1);
    boolean b44 = ringBuffer43.isEmpty();
    java.util.Spliterator spliterator45 = ringBuffer43.spliterator();
    java.util.Spliterator spliterator46 = ringBuffer43.spliterator();
    java.util.Iterator iterator47 = ringBuffer43.iterator();
    java.util.Iterator iterator48 = ringBuffer43.iterator();
    boolean b49 = ringBuffer43.isEmpty();
    exercise03.RingBuffer ringBuffer51 = new exercise03.RingBuffer(1);
    boolean b52 = ringBuffer51.isEmpty();
    java.util.Spliterator spliterator53 = ringBuffer51.spliterator();
    java.util.Spliterator spliterator54 = ringBuffer51.spliterator();
    ringBuffer43.enqueue((java.lang.Object)ringBuffer51);
    exercise03.RingBuffer ringBuffer57 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator58 = ringBuffer57.iterator();
    ringBuffer51.enqueue((java.lang.Object)ringBuffer57);
    java.util.Iterator iterator60 = ringBuffer57.iterator();
    boolean b61 = ringBuffer57.isEmpty();
    java.util.Spliterator spliterator62 = ringBuffer57.spliterator();
    ringBuffer32.enqueue((java.lang.Object)spliterator62);
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer11.enqueue((java.lang.Object)spliterator62);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator62);

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test474"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator11 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer13 = new exercise03.RingBuffer(1);
    boolean b14 = ringBuffer13.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer13.spliterator();
    java.util.Spliterator spliterator16 = ringBuffer13.spliterator();
    java.util.Iterator iterator17 = ringBuffer13.iterator();
    boolean b18 = ringBuffer13.isEmpty();
    int i19 = ringBuffer13.size();
    java.util.Spliterator spliterator20 = ringBuffer13.spliterator();
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(1);
    boolean b23 = ringBuffer22.isEmpty();
    java.util.Spliterator spliterator24 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator25 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator26 = ringBuffer22.spliterator();
    java.util.Iterator iterator27 = ringBuffer22.iterator();
    ringBuffer13.enqueue((java.lang.Object)iterator27);
    ringBuffer1.enqueue((java.lang.Object)iterator27);
    boolean b30 = ringBuffer1.isEmpty();
    int i31 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer33 = new exercise03.RingBuffer(1);
    boolean b34 = ringBuffer33.isEmpty();
    java.util.Iterator iterator35 = ringBuffer33.iterator();
    boolean b36 = ringBuffer33.isEmpty();
    exercise03.RingBuffer ringBuffer38 = new exercise03.RingBuffer(1);
    boolean b39 = ringBuffer38.isEmpty();
    java.util.Spliterator spliterator40 = ringBuffer38.spliterator();
    java.util.Spliterator spliterator41 = ringBuffer38.spliterator();
    java.util.Iterator iterator42 = ringBuffer38.iterator();
    java.util.Iterator iterator43 = ringBuffer38.iterator();
    boolean b44 = ringBuffer38.isEmpty();
    exercise03.RingBuffer ringBuffer46 = new exercise03.RingBuffer(1);
    boolean b47 = ringBuffer46.isEmpty();
    java.util.Spliterator spliterator48 = ringBuffer46.spliterator();
    java.util.Spliterator spliterator49 = ringBuffer46.spliterator();
    ringBuffer38.enqueue((java.lang.Object)ringBuffer46);
    exercise03.RingBuffer ringBuffer52 = new exercise03.RingBuffer(10);
    java.util.Iterator iterator53 = ringBuffer52.iterator();
    ringBuffer46.enqueue((java.lang.Object)ringBuffer52);
    exercise03.RingBuffer ringBuffer56 = new exercise03.RingBuffer(1);
    boolean b57 = ringBuffer56.isEmpty();
    java.util.Spliterator spliterator58 = ringBuffer56.spliterator();
    java.util.Spliterator spliterator59 = ringBuffer56.spliterator();
    java.util.Iterator iterator60 = ringBuffer56.iterator();
    boolean b61 = ringBuffer56.isEmpty();
    int i62 = ringBuffer56.size();
    java.util.Iterator iterator63 = ringBuffer56.iterator();
    exercise03.RingBuffer ringBuffer65 = new exercise03.RingBuffer(1);
    boolean b66 = ringBuffer65.isEmpty();
    java.util.Spliterator spliterator67 = ringBuffer65.spliterator();
    java.util.Spliterator spliterator68 = ringBuffer65.spliterator();
    java.util.Iterator iterator69 = ringBuffer65.iterator();
    boolean b70 = ringBuffer65.isEmpty();
    int i71 = ringBuffer65.size();
    java.util.Spliterator spliterator72 = ringBuffer65.spliterator();
    ringBuffer56.enqueue((java.lang.Object)ringBuffer65);
    java.util.Spliterator spliterator74 = ringBuffer65.spliterator();
    boolean b75 = ringBuffer65.isEmpty();
    ringBuffer52.enqueue((java.lang.Object)b75);
    java.util.Spliterator spliterator77 = ringBuffer52.spliterator();
    ringBuffer33.enqueue((java.lang.Object)spliterator77);
    boolean b79 = ringBuffer33.isEmpty();
    java.util.Spliterator spliterator80 = ringBuffer33.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer33);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator80);

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test475"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    int i7 = ringBuffer1.size();
    int i8 = ringBuffer1.size();
    int i9 = ringBuffer1.size();
    int i10 = ringBuffer1.size();
    int i11 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer13 = new exercise03.RingBuffer(1);
    boolean b14 = ringBuffer13.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer13.spliterator();
    java.util.Spliterator spliterator16 = ringBuffer13.spliterator();
    java.util.Iterator iterator17 = ringBuffer13.iterator();
    boolean b18 = ringBuffer13.isEmpty();
    exercise03.RingBuffer ringBuffer20 = new exercise03.RingBuffer(1);
    ringBuffer13.enqueue((java.lang.Object)ringBuffer20);
    java.util.Iterator iterator22 = ringBuffer20.iterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer20);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj24 = ringBuffer20.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test476"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(0);
    java.util.Spliterator spliterator2 = ringBuffer1.spliterator();
    boolean b3 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test477"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    boolean b7 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer9 = new exercise03.RingBuffer(1);
    boolean b10 = ringBuffer9.isEmpty();
    java.util.Spliterator spliterator11 = ringBuffer9.spliterator();
    java.util.Spliterator spliterator12 = ringBuffer9.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer9);
    boolean b14 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer1.spliterator();
    boolean b16 = ringBuffer1.isEmpty();
    java.util.Iterator iterator17 = ringBuffer1.iterator();
    java.util.Iterator iterator18 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test478"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer11.spliterator();
    java.util.Iterator iterator16 = ringBuffer11.iterator();
    ringBuffer8.enqueue((java.lang.Object)ringBuffer11);
    java.util.Spliterator spliterator18 = ringBuffer8.spliterator();
    boolean b19 = ringBuffer8.isEmpty();
    boolean b20 = ringBuffer8.isEmpty();
    java.util.Iterator iterator21 = ringBuffer8.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator21);

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test479"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    int i9 = ringBuffer1.size();
    int i10 = ringBuffer1.size();
    int i11 = ringBuffer1.size();
    int i12 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test480"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    boolean b5 = ringBuffer1.isEmpty();
    int i6 = ringBuffer1.size();
    boolean b7 = ringBuffer1.isEmpty();
    boolean b8 = ringBuffer1.isEmpty();
    java.util.function.Consumer consumer9 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test481"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    int i7 = ringBuffer1.size();
    boolean b8 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    exercise03.RingBuffer ringBuffer17 = new exercise03.RingBuffer(1);
    ringBuffer17.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator20 = ringBuffer17.spliterator();
    java.lang.Object obj21 = ringBuffer17.dequeue();
    java.util.Spliterator spliterator22 = ringBuffer17.spliterator();
    ringBuffer10.enqueue((java.lang.Object)spliterator22);
    java.lang.Object obj24 = ringBuffer10.dequeue();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 'a'+ "'", obj21.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj24);

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test482"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    int i5 = ringBuffer1.size();
    java.util.Spliterator spliterator6 = ringBuffer1.spliterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Iterator iterator9 = ringBuffer1.iterator();
    java.util.Iterator iterator10 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer12 = new exercise03.RingBuffer(1);
    boolean b13 = ringBuffer12.isEmpty();
    java.util.Spliterator spliterator14 = ringBuffer12.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer12.spliterator();
    java.util.Iterator iterator16 = ringBuffer12.iterator();
    boolean b17 = ringBuffer12.isEmpty();
    java.util.Iterator iterator18 = ringBuffer12.iterator();
    exercise03.RingBuffer ringBuffer20 = new exercise03.RingBuffer(1);
    boolean b21 = ringBuffer20.isEmpty();
    java.util.Spliterator spliterator22 = ringBuffer20.spliterator();
    java.util.Spliterator spliterator23 = ringBuffer20.spliterator();
    java.util.Spliterator spliterator24 = ringBuffer20.spliterator();
    java.util.Iterator iterator25 = ringBuffer20.iterator();
    int i26 = ringBuffer20.size();
    ringBuffer12.enqueue((java.lang.Object)ringBuffer20);
    java.util.Spliterator spliterator28 = ringBuffer12.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer12);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test483"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(0);
    java.util.Spliterator spliterator2 = ringBuffer1.spliterator();
    boolean b3 = ringBuffer1.isEmpty();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj4 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test484"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    int i8 = ringBuffer1.size();
    boolean b9 = ringBuffer1.isEmpty();
    java.util.Iterator iterator10 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer12 = new exercise03.RingBuffer(1);
    boolean b13 = ringBuffer12.isEmpty();
    java.util.Spliterator spliterator14 = ringBuffer12.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer12.spliterator();
    java.util.Iterator iterator16 = ringBuffer12.iterator();
    java.util.Iterator iterator17 = ringBuffer12.iterator();
    boolean b18 = ringBuffer12.isEmpty();
    int i19 = ringBuffer12.size();
    boolean b20 = ringBuffer12.isEmpty();
    int i21 = ringBuffer12.size();
    boolean b22 = ringBuffer12.isEmpty();
    exercise03.RingBuffer ringBuffer24 = new exercise03.RingBuffer(1);
    ringBuffer24.enqueue((java.lang.Object)'a');
    java.lang.Object obj27 = ringBuffer24.dequeue();
    java.util.Spliterator spliterator28 = ringBuffer24.spliterator();
    java.lang.Object obj29 = null;
    ringBuffer24.enqueue(obj29);
    java.util.Spliterator spliterator31 = ringBuffer24.spliterator();
    boolean b32 = ringBuffer24.isEmpty();
    ringBuffer12.enqueue((java.lang.Object)ringBuffer24);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer24);
    java.util.Spliterator spliterator35 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 'a'+ "'", obj27.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test485"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Iterator iterator19 = ringBuffer1.iterator();
    java.util.Spliterator spliterator20 = ringBuffer1.spliterator();
    int i21 = ringBuffer1.size();
    java.util.function.Consumer consumer22 = null;
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.forEach(consumer22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test486"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Iterator iterator19 = ringBuffer10.iterator();
    boolean b20 = ringBuffer10.isEmpty();
    boolean b21 = ringBuffer10.isEmpty();
    exercise03.RingBuffer ringBuffer23 = new exercise03.RingBuffer(1);
    boolean b24 = ringBuffer23.isEmpty();
    java.util.Spliterator spliterator25 = ringBuffer23.spliterator();
    java.util.Spliterator spliterator26 = ringBuffer23.spliterator();
    java.util.Iterator iterator27 = ringBuffer23.iterator();
    boolean b28 = ringBuffer23.isEmpty();
    exercise03.RingBuffer ringBuffer30 = new exercise03.RingBuffer(1);
    ringBuffer23.enqueue((java.lang.Object)ringBuffer30);
    exercise03.RingBuffer ringBuffer33 = new exercise03.RingBuffer(1);
    boolean b34 = ringBuffer33.isEmpty();
    java.util.Spliterator spliterator35 = ringBuffer33.spliterator();
    java.util.Spliterator spliterator36 = ringBuffer33.spliterator();
    java.util.Spliterator spliterator37 = ringBuffer33.spliterator();
    java.util.Iterator iterator38 = ringBuffer33.iterator();
    ringBuffer30.enqueue((java.lang.Object)ringBuffer33);
    ringBuffer10.enqueue((java.lang.Object)ringBuffer30);
    java.util.Spliterator spliterator41 = ringBuffer10.spliterator();
    exercise03.RingBuffer ringBuffer43 = new exercise03.RingBuffer(1);
    java.util.Iterator iterator44 = ringBuffer43.iterator();
    java.util.Iterator iterator45 = ringBuffer43.iterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer10.enqueue((java.lang.Object)iterator45);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator45);

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test487"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    int i10 = ringBuffer1.size();
    int i11 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer13 = new exercise03.RingBuffer(1);
    boolean b14 = ringBuffer13.isEmpty();
    java.util.Spliterator spliterator15 = ringBuffer13.spliterator();
    java.util.Spliterator spliterator16 = ringBuffer13.spliterator();
    java.util.Iterator iterator17 = ringBuffer13.iterator();
    boolean b18 = ringBuffer13.isEmpty();
    java.util.Iterator iterator19 = ringBuffer13.iterator();
    exercise03.RingBuffer ringBuffer21 = new exercise03.RingBuffer(1);
    boolean b22 = ringBuffer21.isEmpty();
    java.util.Spliterator spliterator23 = ringBuffer21.spliterator();
    java.util.Spliterator spliterator24 = ringBuffer21.spliterator();
    java.util.Iterator iterator25 = ringBuffer21.iterator();
    boolean b26 = ringBuffer21.isEmpty();
    int i27 = ringBuffer21.size();
    java.util.Spliterator spliterator28 = ringBuffer21.spliterator();
    ringBuffer13.enqueue((java.lang.Object)spliterator28);
    ringBuffer1.enqueue((java.lang.Object)spliterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test488"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    java.util.Iterator iterator6 = ringBuffer1.iterator();
    java.util.Iterator iterator7 = ringBuffer1.iterator();
    boolean b8 = ringBuffer1.isEmpty();
    int i9 = ringBuffer1.size();
    java.util.Iterator iterator10 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator10);

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test489"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Iterator iterator4 = ringBuffer1.iterator();
    java.lang.Object obj5 = ringBuffer1.dequeue();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    int i9 = ringBuffer1.size();
    int i10 = ringBuffer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 'a'+ "'", obj5.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test490"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Iterator iterator8 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    boolean b15 = ringBuffer10.isEmpty();
    int i16 = ringBuffer10.size();
    java.util.Spliterator spliterator17 = ringBuffer10.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer10);
    java.util.Iterator iterator19 = ringBuffer1.iterator();
    java.util.Spliterator spliterator20 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer22 = new exercise03.RingBuffer(1);
    boolean b23 = ringBuffer22.isEmpty();
    java.util.Spliterator spliterator24 = ringBuffer22.spliterator();
    java.util.Spliterator spliterator25 = ringBuffer22.spliterator();
    java.util.Iterator iterator26 = ringBuffer22.iterator();
    boolean b27 = ringBuffer22.isEmpty();
    int i28 = ringBuffer22.size();
    java.util.Iterator iterator29 = ringBuffer22.iterator();
    exercise03.RingBuffer ringBuffer31 = new exercise03.RingBuffer(1);
    boolean b32 = ringBuffer31.isEmpty();
    java.util.Spliterator spliterator33 = ringBuffer31.spliterator();
    java.util.Spliterator spliterator34 = ringBuffer31.spliterator();
    java.util.Iterator iterator35 = ringBuffer31.iterator();
    boolean b36 = ringBuffer31.isEmpty();
    int i37 = ringBuffer31.size();
    java.util.Spliterator spliterator38 = ringBuffer31.spliterator();
    ringBuffer22.enqueue((java.lang.Object)ringBuffer31);
    java.util.Spliterator spliterator40 = ringBuffer31.spliterator();
    // The following exception was thrown during execution in test generation
    try {
      ringBuffer1.enqueue((java.lang.Object)ringBuffer31);
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator40);

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test491"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    exercise03.RingBuffer ringBuffer7 = new exercise03.RingBuffer(1);
    boolean b8 = ringBuffer7.isEmpty();
    java.util.Spliterator spliterator9 = ringBuffer7.spliterator();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer7);
    boolean b11 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer13 = new exercise03.RingBuffer(1);
    boolean b14 = ringBuffer13.isEmpty();
    ringBuffer13.enqueue((java.lang.Object)(short)0);
    int i17 = ringBuffer13.size();
    ringBuffer1.enqueue((java.lang.Object)ringBuffer13);
    java.lang.Object obj19 = ringBuffer13.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + (short)0+ "'", obj19.equals((short)0));

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test492"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(100);
    exercise03.RingBuffer ringBuffer3 = new exercise03.RingBuffer(1);
    boolean b4 = ringBuffer3.isEmpty();
    java.util.Spliterator spliterator5 = ringBuffer3.spliterator();
    java.util.Spliterator spliterator6 = ringBuffer3.spliterator();
    java.util.Iterator iterator7 = ringBuffer3.iterator();
    boolean b8 = ringBuffer3.isEmpty();
    java.util.Iterator iterator9 = ringBuffer3.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator9);
    int i11 = ringBuffer1.size();
    boolean b12 = ringBuffer1.isEmpty();
    java.util.Iterator iterator13 = ringBuffer1.iterator();
    int i14 = ringBuffer1.size();
    exercise03.RingBuffer ringBuffer16 = new exercise03.RingBuffer(1);
    boolean b17 = ringBuffer16.isEmpty();
    java.util.Spliterator spliterator18 = ringBuffer16.spliterator();
    java.util.Spliterator spliterator19 = ringBuffer16.spliterator();
    java.util.Iterator iterator20 = ringBuffer16.iterator();
    boolean b21 = ringBuffer16.isEmpty();
    java.util.Iterator iterator22 = ringBuffer16.iterator();
    exercise03.RingBuffer ringBuffer24 = new exercise03.RingBuffer(1);
    boolean b25 = ringBuffer24.isEmpty();
    java.util.Spliterator spliterator26 = ringBuffer24.spliterator();
    java.util.Spliterator spliterator27 = ringBuffer24.spliterator();
    java.util.Spliterator spliterator28 = ringBuffer24.spliterator();
    java.util.Iterator iterator29 = ringBuffer24.iterator();
    int i30 = ringBuffer24.size();
    ringBuffer16.enqueue((java.lang.Object)ringBuffer24);
    java.util.Iterator iterator32 = ringBuffer16.iterator();
    java.util.Spliterator spliterator33 = ringBuffer16.spliterator();
    ringBuffer1.enqueue((java.lang.Object)spliterator33);
    java.util.Spliterator spliterator35 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator35);

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test493"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(10);
    ringBuffer1.enqueue((java.lang.Object)'#');
    int i4 = ringBuffer1.size();
    boolean b5 = ringBuffer1.isEmpty();
    java.lang.Object obj6 = ringBuffer1.dequeue();
    java.util.Spliterator spliterator7 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj6 + "' != '" + '#'+ "'", obj6.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator7);

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test494"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(0);
    java.util.Iterator iterator2 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator2);

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test495"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)'a');
    java.util.Iterator iterator4 = ringBuffer1.iterator();
    java.lang.Object obj5 = ringBuffer1.dequeue();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    boolean b8 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Iterator iterator14 = ringBuffer10.iterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    boolean b16 = ringBuffer10.isEmpty();
    exercise03.RingBuffer ringBuffer18 = new exercise03.RingBuffer(1);
    boolean b19 = ringBuffer18.isEmpty();
    java.util.Spliterator spliterator20 = ringBuffer18.spliterator();
    java.util.Spliterator spliterator21 = ringBuffer18.spliterator();
    ringBuffer10.enqueue((java.lang.Object)ringBuffer18);
    boolean b23 = ringBuffer10.isEmpty();
    java.util.Iterator iterator24 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator24);
    java.util.Iterator iterator26 = ringBuffer1.iterator();
    boolean b27 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 'a'+ "'", obj5.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test496"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    exercise03.RingBuffer ringBuffer8 = new exercise03.RingBuffer(1);
    ringBuffer1.enqueue((java.lang.Object)ringBuffer8);
    exercise03.RingBuffer ringBuffer11 = new exercise03.RingBuffer(1);
    boolean b12 = ringBuffer11.isEmpty();
    java.util.Spliterator spliterator13 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer11.spliterator();
    java.util.Spliterator spliterator15 = ringBuffer11.spliterator();
    java.util.Iterator iterator16 = ringBuffer11.iterator();
    ringBuffer8.enqueue((java.lang.Object)ringBuffer11);
    java.util.Spliterator spliterator18 = ringBuffer8.spliterator();
    int i19 = ringBuffer8.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test497"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    exercise03.RingBuffer ringBuffer10 = new exercise03.RingBuffer(1);
    boolean b11 = ringBuffer10.isEmpty();
    java.util.Spliterator spliterator12 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator13 = ringBuffer10.spliterator();
    java.util.Spliterator spliterator14 = ringBuffer10.spliterator();
    java.util.Iterator iterator15 = ringBuffer10.iterator();
    ringBuffer1.enqueue((java.lang.Object)iterator15);
    boolean b17 = ringBuffer1.isEmpty();
    boolean b18 = ringBuffer1.isEmpty();
    int i19 = ringBuffer1.size();
    java.util.Spliterator spliterator20 = ringBuffer1.spliterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator20);

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test498"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    boolean b6 = ringBuffer1.isEmpty();
    int i7 = ringBuffer1.size();
    java.util.Spliterator spliterator8 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator9 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator10 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator11 = ringBuffer1.spliterator();
    java.util.Iterator iterator12 = ringBuffer1.iterator();
    boolean b13 = ringBuffer1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test499"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    java.util.Spliterator spliterator3 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator4 = ringBuffer1.spliterator();
    java.util.Spliterator spliterator5 = ringBuffer1.spliterator();
    int i6 = ringBuffer1.size();
    int i7 = ringBuffer1.size();
    // The following exception was thrown during execution in test generation
    try {
      java.lang.Object obj8 = ringBuffer1.dequeue();
      org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException");
    } catch (exercise03.RingBufferException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("exercise03.RingBufferException")) {
        org.junit.Assert.fail("Expected exception of type exercise03.RingBufferException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test500"); }


    exercise03.RingBuffer ringBuffer1 = new exercise03.RingBuffer(1);
    boolean b2 = ringBuffer1.isEmpty();
    ringBuffer1.enqueue((java.lang.Object)(short)0);
    java.util.Iterator iterator5 = ringBuffer1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator5);

  }

}
